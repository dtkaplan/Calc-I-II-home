[
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources for Calc I/II",
    "section": "",
    "text": "This is where I’ll put information about textbooks, policies, etc."
  },
  {
    "objectID": "basics.html",
    "href": "basics.html",
    "title": "Policies and other course information",
    "section": "",
    "text": "Assignments:\n\nThe readings should be completed before class (which will put you in a position to answer the reading questions). The reading questions should also be submitted before the class for which the reading is assigned.\nWhen you have questions about a reading, let’s make it part of a class discussion on the day the reading is due.\nExercises are due by the class day after they are assigned.\n\n\n\n\n\n\n\nLink for homework submissions\n\n\n\nEach of the homework assignment documents is set up to collect your answers at the press of a button. The answers are copied to your clipboard in a web-standard format called JSON, which you aren’t expected to read.\nFrom your clipboard, paste the JSON string into this Google Form\nI suggest that you bookmark the Google Form link. You will be using it often.\n\n\nOrientation to each day: For simplicity, most class days will be structured in the same way:\n\nOften, we will cover one chapter of MOSAIC Calculus each class days. Some chapters may take longer.\nWe will discuss the reading in class, so you should do the reading and hand in the reading questions before that class.\nYou can go back, re-do, and re-submit the reading questions if you like, but this is not required.\nThe assignment for each chapter will be due the class day following the discussion of that chapter. If you have questions, bring them to that following day to discuss them, then you can complete your assignment."
  },
  {
    "objectID": "posts/2025-01-07-notes/index.html",
    "href": "posts/2025-01-07-notes/index.html",
    "title": "2025-01-07 class notes",
    "section": "",
    "text": "1 About the preface\n\nYou took some mathematics in high school.\n\nStarting with, say, 9th grade, up to but not including calculus, what topics did you study? [Assemble a list.]\nWhat were these topics for? Directly of use? Preparation for further study? [Work with list].\n\nYou are taking this calculus course. What are you hoping to get out of it?\nDid you take a calculus course?\n\nTell me what calculus is about. (But don’t recite from the readings.)\nWhere does the word calculus come from?\nWhat calculus topics did you cover? [Assemble a list.]\nWhat were these topic for? Directly of use? Preparation for further study?\n\nA little history of this course.\n\nOrigins in “calculus reform” from the late 20th century\nMAA project to find what “partner disciplines” needed from college math. There was little overlap with traditional topics.\nIntroduced in 2003 at Macalester College with support from US NSF, Keck Foundation, HHMI\n\nBecame the second most heavily enrolled class at Macalester. (The statistics counterpart was the most enrolled.)\nStill taught at Macalester,\n\nThe US Air Force Academy invited me to redo their core math requirements. The current version of the course is now their official calculus curriculum, taken by about 800 cadets every year.\n\nWarning: This course will be different from any other calculus course you are likely to have encountered.\n\nMany obsolete topics have been discarded.\nComputing is at the center of the course. Algebraic manipulation is greatly de-emphasized.\nIt is multi-variate from the beginning.\nIt is an applied course, meaning that we focus on techniques that are useful across a broad array of tasks. We avoid the layer of theory that mathematicians added to calculus in the middle of the 19th century.\nJust two courses will cover the topics is the usual four- or five-semester-long sequence.\n\n\n\n\n2 Resources\n\nDay-by-day schedule will explicitly list readings and assignments. Reading questions are due before the class which they are linked to.\nFree, online textbook, MOSIAC Calculus.\nExercises, reading questions, projects are in the MOSAIC Calculus Workbook.\nShow how to hand in assignments electronically.\nComputing is integral to the course. We use the professional-level R platform, which is also being used in QR2.\n\nEverything is open source.\nEach course has its own set of basic R functions.\nThe computing is embedded into course documents, so you don’t have to install anything.\nFor those who are especially keen, you can install the (free) software on your laptop. But, to avoid confusion and to work with the electronic submission of assignments, use the embedded software for your course work.\n\n\n\n\n3 Chap 1: Quantity, function, space\nThese are the big three concepts for our calculus course. Neither Newton nor Leibniz would recognize them for what they are. Calculus has evolved hugely since its invention, and continues to evolve.\n\nExample: Our calculus course is closely related to the methods used in machine learning and (so-called) artificial intelligence.\n\nQuantity: the amount of some “stuff.” Need to specify both the amount and the kind of stuff.\n\nUnits tell us the kind of stuff.\n“Dimensions” is the framework for organizing units. It’s important to master this. Fundamental dimensions: L, T, M.\nDerived dimensions, e.g. L/T or L/T2, or M L2 / T2 are constructed by multiplying and dividing fundamental dimensions. Only multiplication and division are allowed!\nWe often have English words that correspond to specific dimensions, e.g. M L2 T-2 is “energy” while M L2 T-3 is “power.” Other, very common English dimension words: area, volume, flow, …\n\nFunction: in the calculus sense is a relationship between one or more inputs and a single output. You will learn about 20 vocabulary terms involving functions, some of which you already know. It is crucial to use the vocabulary precisely and accurately. Examples: input, domain, output, curvature, continuity, …\n\nNotation: Almost every function will have a name, e.g. sin, sqrt. We will usually write the name followed by a pair of empty parentheses to remind us that the name refers to a function.\nPutting inputs inside the parentheses means “evaluate the function for that input.” Example:\n\n\\(\\sin()\\) is the name of a function\n\\(\\sin(\\pi)\\) is a number, not a function.\nOften we will use names for the inputs to a function, especially when defining them, e.g., \\(f(x, t) \\equiv A \\exp(-t/T_0) \\sin(2\\pi t/P)\\).\n\nSurprising fundamental fact that you didn’t learn in high school. If \\(t\\) stands for time (say, units of seconds), then \\(\\sin(t)\\) is not a valid expression. We’ll see why later.\nA good, but partial definition of calculus is “the mathematics of functions.”\n\nSpace: This is at once completely intuitive and utterly incomprehensible. In a mathematical sense, a space is a “set of possibilities.” Each individual possibility is called a “point.”\nExamples: - A table-top is a space. You can put an object at any point on the table. - The stuff of the universe occupies space. Intuitively, this is 3-dimensional space, but relativists consider it to be 4-dimensional and string-theorists often talk about 9-dimensional space.\nCalculus is largely about state, change, and motion. A state is a point in the space. To change means to move from one point in the space to another. From any point, there is a set of independent directions in which you can move: e.g. left-right, forward-back, up-down. The number of such independent directions is called the “degrees of freedom” of the state.\n\n\n4 Activity\nWhat is the state of a baseball game? Construct a complete set of quantities to represent the state at an instant in time.\nThis is a modeling task. To get anywhere, you have to decide what aspects of the situation are important. For instance, saying the state is a set of molecular positions and orientations would be unwieldy and impractical.\n“Important” is a subjective term and depends on the goals of the modeler. A good place to start when constructing a model is to think about the people the model is intended to serve.\n\n\n5 Activity II\n\nDo the reading questions and hand them in.\nIf there is time … Start on the exercises. Have students hand in the work that they get done."
  },
  {
    "objectID": "posts/2025-01-10-notes/index.html",
    "href": "posts/2025-01-10-notes/index.html",
    "title": "UATX Calc-I-II, AY 2025",
    "section": "",
    "text": "3 2025-01-10 class notes\n\n3.1 Where we are\nWe’ve been introducing new terms that we will employ throughout the semester, mostly with an eye to creating an explicit nomenclature and notation.\n\nFundamental concepts: Quantity, Function, Space\nModeling: The process of constructing a model. We will cover this systematically, but not yet.\nWe will use two systems for notation:\n\ntraditional, as you might see in the textbook reading.\ncomputing, to be used in constructing computer commands\n\n\nI’ve taken pains to make the two systems of notation as similar as possible, but respect for tradition and the restrictions of computer language interpreters force some divergences.\nElements of notation:\n\nnames: x, y, t, rainfall, temp_{high}. When writing a name in computer notation, do not use quotation marks.\nnumerals: the character representation of a number.\nfunctions: f(), g(), h() are common pronouns, but we will use a lot of proper names for functions, e.g. sin(), log(), dnorm(). (dnorm() is a new one for you! Be patient.)\n\nI write the () after a function name to remind you that the thing being named is a function.\nA handful of functions are written in infix notation. Thus, + is a function name, but you use it as 3 + 2 with the two arguments on the different sides of the function name. This contrasts with functional notation which would look something like \\(plus(3, 2)\\). Even on the computer, don’t convert infix notation to functional notation. Infix is usually easier to read (so long as there are just a handful of operators.)\n\ndefining mathematical functions. When modeling, we will be creating and using mathematical functions. We will also be building computing expressions using computer functions.\ntraditional notation to define a function named henry(): \\(\\text{henry}(t) \\equiv t^2 / \\sin(2\\pi t/P)\\)\ncomputer notation: henry &lt;- makeFun(t^2 / sin(2*pi*t/P) ~ t)\nNote that the computer notation doesn’t have “implicit multiplication.” You must use the * infix operator.\n\n\n\n3.2 Computing with R\n\n3.2.1 Chunks for composing commands\nIn your own work, you will use interactive boxes—called “chunks” or “webr chunks”—to construct commands and, by pressing the “Run Code” button, get the computer to process them and appropriately display the results. It looks like this:\n\nIn writing up notes, I often use a different system that looks like this, without a “Run Code” button.\n\n2 + 3\n\n[1] 5\n\n\nIn both styles, the output is reported with some formatting. The content of the output in the above chunks is 5. Often, output will have more than one component and the [1] is just telling you that the 5 is the first component.\nYou’ll also sometimes see me using a different interface, called “RStudio,” where I type commands in a console or in a document. You don’t need to worry about this.\nYou cannot create on your own a webr chunk. I create them in the process of writing documents that you use. For instance, here is one:\n\n\n\n\n\n\nBut you can use a webr-chunk for any purpose that you like. Feel free to erase whatever expression has been typed and put in your own.\nNB: Use the Calc I/II webr chunks for calculus, and the QR2 webr chunks for QR2. It would have been possible to arrange things so that you could use any chunk for any course, but I haven’t thought this necessary.\nIN-CLASS EXERCISES:\nDo some arithmetic and simple function application in R:\n\n\\(\\frac{22 - 5}{7}\\)\n\\(4.14\\! \\times\\! 10^{-3} \\times 2.83\\!\\times\\!10^{4}\\)\n\\(18 \\sin \\frac{\\pi}{5}\\)\n\\(\\ln(200)\\)\n\\(\\log_{10}(1000)\\)\n\\(\\sqrt{17}\\)\n\\(\\sqrt[3]{17}\\)\n\\(2.14^{3.1 + 7.8}\\)\n\\(e^2\\)\n\n\n\n\n\n\n\n\n\n\n3.3 Storage\nWe often will want to give names to computed objects.\n\nI use the strange word “object” because there are different kinds of computationally constructed things, e.g. numbers and functions among several others. (For instance, in QR2, you will sometimes create “simulations.”)\nThe computer syntax for giving a name to an object involves the “storage arrow” -&gt;. Here, I’ll store the value 5.3 under the name b. The name always goes on the RHS of &lt;-.\n\n\nb &lt;- 5.3\n\nNote that when you store an object, the object is not printed.\nTo recall the named object from storage, just use the name as a command or as part of a command. For instance:\n\nb\n\n[1] 5.3\n\nb + 17\n\n[1] 22.3\n\n\nIN-CLASS EXERCISES:\n\nStore the value \\(\\sqrt{22}\\) under the name billy_bob. Then confirm by calculating billy_bob squared.\nWhy is \\(y^4 = 19\\) not a valid storage expression? Fix it to express the intent.\nCan = be used in place of &lt;-?\n\n\n\n\n\n\n\n\n\n3.4 Errors\nIn response to an ill-formed computer command or some other troubling condition, R will cancel the computation and display an error message. For instance, here is an expression that refers to a name that is not yet in use:\n\nbb\n\nError in eval(expr, envir, enclos): object 'bb' not found\n\n\nOn some web browsers, the webr-chunk error messages are not shown. That’s a bug, and I’m trying to figure out what to do about it. For now, I can only apologize and give you a heads up.\nError messages are your friend. Admittedly, it is the kind of friend who you only welcome under special circumstances and otherwise avoid. The friend’s affect is offputting and intimidating. Try to overcome being affected by that. Also, the friend mostly mumbles. It takes work to feret out the valuable hint that your friend is trying to provide.\nIn-class EXERCISES:\n\nWhat happens if you use the name billy bob to hold the value \\(\\cos(22)\\)? After observing the error message, fix it.\n\n\n\n\n\n\n\n\nHere is a command intended to create a function francis():\n\n\n\n\n\n\n\nFigure out what’s wrong and fix it.\n\n\n3.5 Graphs of functions\nGraphing functions of one variable and setting the graphics domain.\n\ndomain(x = 0:10)\nslice_plot(x^2 - 3*x + 2 ~ x, domain(x=-5:5))\n\nIn-class EXERCISES:\n\n\n\n\n\n\n\nPlot out each of the pattern-book functions on a suitable domain. pnorm(), dnorm(), exp(), sin(), sqrt(), log(),\nDefine a recip() function using makeFun().\nDefine an identity() function using makeFun(). (The identity function returns its input unaltered.)\nDefine a power_law() function using makeFun(). Example of a power-law function: \\(y^{2.4}\\)"
  },
  {
    "objectID": "posts/2025-01-09-notes/index.html",
    "href": "posts/2025-01-09-notes/index.html",
    "title": "UATX Calc-I-II, AY 2025",
    "section": "",
    "text": "2 2025-01-09 class notes\n\n2.1 Where we are\n\nWe’ve talked about modeling, the construction of a mathematical representation of the context of interest. i.You had a very short time to lay out the quantities that might enter in to a model of a baseball game during a stop in the action, e.g. between innings or after a second out.\n\nYou got a glimpse that the intended purpose for a model shapes what kind of model (e.g. the quantities in (i)) is appropriate.\nA good mantra for modeling is that “All models are wrong. Some models are useful.”\n\nYou’ve gotten a brief introduction to three mathematical concepts that underlie modeling and calculus in general.\n\nQuantities (and their dimensions/units).\n\nProbably you are not completely clear on the difference between “units” and “dimensions.” Don’t worry. We will come back to it in a couple of weeks.\n\n\nFunctions, a relationship between zero or more inputs and a single output.\n\nMathematical functions with zero inputs are fairly called “constants.” But it simplifies notation if we can consider 1 or 0 or whatever to be a “function,” even though it always gives the same output.\n\nSpaces. A set of possibilities. a. Spaces have a dimension, but this use of the word is only tangentially replaced to the “dimension” associated with a quantity. b. Your intuition of position on a line (one dimensional), position in a plane (two dimensional), and position in everyday 3-dimensional space will suffice. c. The mathematical idea of “space” is an abstraction and generalization of the intuitive, everyday notion. So you’ll find yourself working with spaces that can have tens or hundreds or any (integer) number of dimensions. There is even an obscure mathematical idea of non-integer dimensions; “fractals” are best known. We will not be working with them. d. You know intuitively how to move around physical, 1-, 2-, and 3-dimensional spaces. You haven’t yet learned the methods of moving around high-dimensional spaces. Be patient.\n\n\nGo over chapter 1 reading questions.\n\n\n2.2 NOTATION: our topic for today.\nThe notation you learned in high-school involves pictures, which you have learned to interpret. There are individual tokens, say 2 and \\(x\\) as well as all the other letters, numbers, symbols. The geometrical arrangement of these tokens in a compound picture indicates what mathematical idea is being denoted. You’re used to pictures like \\(x^2\\) or \\(\\sin(2 \\pi t / P)\\). There are also pictures that are obscure until you get to higher math. For example, in Calculus, pictures like\n\\[\\int_0^\\infty \\frac{1}{x^2}dx\\]\nMany people (like me) think these picture can be beautiful, but there are several shortcomings.\n\nIt can require a lot of experience to understand the meaning of many pictures because very similar pictures can have very different meanings. For instance:\n\n\\[\\int_0^\\infty \\frac{1}{x^2}dx\\ \\text{ is a number, but } \\int_x^\\infty \\frac{1}{x^2}dx\\ \\text{is a function}.\\]\n\nThe pictograph-based notation is not easily used with computers. Most people in college-level calculus can use only a pencil or pen to draw the picture. They are devilishly tedious to type. And interpreting the picture typically relies on knowledge of the intent of the picture drawer.\nProfessionals, like me, have learned markup for typing the pictures. The most widely used professional system is TeX, which has been around for 50 years. I’m pretty fluent in TeX and can write a picture almost as fast as you can draw one. You do not need to use TeX, but knowing it gives fantastic insight into the structure of a mathematical expression.\nWe will be using a typewritten notation for communicating mathematical intent to the computer and you will gradually learn to use it for communicating with other people in the class.\nBut we will also use traditional notation, because you have already invested eight to ten years learning it. Talking to you, I’ll use the traditional notation a lot of the time, and computer notation increasingly often as we move along. Questions like, “Can you draw a picture of that expression?” are always in-bounds. But many important mathematical actions and ideas that have not standard equivalent in picture-based notation. Examples: Randomize. Repeat. Accumulate. And often, traditional mathematical instructions have to use natural language words, e.g. \n\n\\[\\text{Solve}\\ 3 x + 4 = 7\\ \\text{for}\\ x.\\]\n\nFinally, we will not have much use for the mathematical equal sign: \\(=\\). I was taught in a traditional way, with \\(=\\) all over the place. So I’ll slip up, and maybe I don’t appreciate how often I need \\(=\\).\n\nCall out “EQUALS” whenever I use \\(=\\) in mathematical notation. But we aware that our computer notation uses = from time to time, but in none of these times is it equivalent to mathematica \\(=\\).\n\n\n2.3 Kinds of things\nSome advice … Whenever you encounter a bit of notation, make sure to ask yourself what kind of thing is being represented by that notation.\n\n2.3.1 Names\nWill almost always be written using Roman letters. Some rules:\n\nNames always start with a letter. Never a numeral.\nUPPER CASE and lower case are different.\nWe will use letters idiomatically, that is, using rules of our own invention.\n\nLetters like u, v, w, x, y, z typically refer to a one-dimensional space, often the number line, but “quantity line” might be a more precise term. We’ll use number-line.\nLetters like a, b, c, A, B, C refer to specific quantities, even if we don’t yet have a specific value for that quantity in hand.\nWe will use non-numerical subscripts and superscripts, e.g. \\(x_0\\) or \\(x^\\star\\). These refer to a special point in the associated space.\nWe will use f, g, h, and a handful of others to be a pronoun for a function. We will usually write the name of a function with parentheses following the letters, e.g. f() or h().\n\n\n\n\n2.3.2 Numerals\nA numeral is the character representation of a number typically constructed from digits, the \\(-\\) sign, decimal point, etc.. Mostly this is familiar. Some numbers have representations not made of digits. You already know about \\(\\pi\\).\nSome numerals have additional characters.\n\n\n\nName\nTraditional\nComputer\n\n\n\n\nScientific notation\n\\(4.72 \\times 10^8\\)\n4.72e8\n\n\nRational numbers\n\\(\\frac{3}{4}\\)\n(3/4)\n\n\nImaginary numbers\n\\(3i\\)\n3i\n\n\n\nHow to find out if something is correct: Try the computer symbol e as a name. What do you get?\n\n\n2.3.3 Functions\nThe functions we work with will typically have a name, and often we will construct a new function and name it ourselves.\n\nTraditional notation gives you a choice: no parens, parens, some other kind of bracket.\n\n\\[ \\sin \\pi, \\ \\ \\ \\sin(\\pi), \\ \\ \\ \\ \\ \\sin[\\pi]\\]\n\nUse only the parenthesis form of a function name, e.g. \\(\\sin()\\), \\(\\log()\\), \\(\\exp()\\) or, in computer notation, sin(), log(), exp().\nWondering which logarithm \\(\\log()\\) refers to? Hold on to that. We will almost always be using the so-called “natural logarithm.” If you don’t know what this is, you are far from the only person. There’s plenty of time to find out.\nThe above style of notation can be called “functional notation.” There are very familiar functions that use a different system for notation, called infix. Infix functions, \\(+\\), \\(-\\), \\(\\times\\), \\(/\\) take two arguments, one placed on the left-hand side of the name the other on the right-hand side of the name, do not involve parentheses.\n\nExamples:\n\n\\(3+2\\) stands for something that in functional notation might be written \\(plus(3, 2)\\).\n\nYou can use infix notation in R, and there is a large number of infix functions. +, -, *, /, ||, %in$, and so on, including the “tilde” ~ that’s used to construct a “tilde expression.” (See Section 2.3.4.) You’re familiarity with traditional infix notation will get you through. Just be aware that the canonical syntax for a function is the “name followed by parentheses.”\nBy way of example of the last sentence in (b), here’s an R command that will accomplish \\(3 + 2\\): +(3, 2)`. The back-quotes (which you will never need to use) are R’s escape mechanism to allow otherwise invalid characters to be used as names.\n\n\n\n\n2.3.4 Defining functions\nHigh-school notation is incredibly sloppy when it comes to working with functions. You’ve seen \\(y = m x + b\\). Is this an equation (yes), a function defintion (sometimes), or a “constraint” (complicated).\nWe will use a consistent notation that yells at you that a function is being defined.\nTraditional notation: \\[\\text{snowfall}(t) \\equiv a t + b\\ .\\] We know that snowfall() is a function because it is a name followed immedidately by an open parenthesis. This has several components:\n\nsnowfall : the name of the function. (But in narratives the name will be written snowfall() so that we can tell immediately that the name refers to a function.)\n\\((t)\\) the function has one input, and we’re calling it \\(t\\).\n\\(\\equiv\\) means defined to be.\n\\(a t + b\\). In this case we are using a formula to define the function.\n\nYou can tell unambiguously that \\(t\\) is the input, because of the way we wrote snowfall(t) on the left side of \\(\\equiv\\).\n\\(a\\) and \\(b\\) are often called parameters. We’ll return to this later.\n\n\nComputer notation: snowfall &lt;- makeFun(a * t + b ~ t)\nThis has the same four components, but written differently.\n\nsnowfall: the name of the function.\n&lt;- a computer instruction called variously “assignment” or “naming” or “stored under the name”. The result of the computation on the right-hand side of &lt;- is the value that will be stored under that name.\nmakeFun(), the name of a computer function. These are the action verbs of computing; they do something with the arguments handed over in the parentheses. The job of makeFun() is to construct a set of computer instructions, packaging it as a function. It’s unfortunate that we use the word “function” to mean different things: 1) a mathematical relationship between inputs and an output and 2) a computer procedure that packages up computer instructions.\na * t + b ~ t. This is a special grammatical construction in the computer language called a tilde expression.\nThe name comes from the character ~.\n\nYou will use tilde expressions very extensively and for many purposes. The one here is taken apart by makeFun(). The R expression on the left-hand side of ~ is a formula, that is, a description of a computation. The R expression on the right-hand side tells makeFun() that the input name will be t.\n\n\nmakeFun() is the right tool for building functions from a formula. As we move through the course you will meet other function-building tools. Some examples (which you don’t need to understand yet):\n\nD() builds a function that is the derivative of the function specified in the tilde expression, e.g. D(snowfall(x) ~ x). I’ll demonstrate:\n\n\nsnowfall &lt;- makeFun(a * t + b ~ t)\nsnowfall\n\nfunction (t, a, b) \na * t + b\n\nD(snowfall(x) ~ x)\n\nfunction (x, a, b) \na\n\n\n\nantiD() builds the “anti-derivative” of the function specified in the tilde epxression.\n\n\nantiD(snowfall(x) ~ x)\n\nfunction (x, a, b, C = 0) \n(x^2 * a + 2 * x * b)/2 + C\n\n\n\nThere will be several others, each in good time.\n\nIF TIME, GO OVER EXERCISES."
  },
  {
    "objectID": "posts/2025-01-13-notes/index.html",
    "href": "posts/2025-01-13-notes/index.html",
    "title": "UATX Calc-I-II, AY 2025",
    "section": "",
    "text": "4 2025-01-14 class notes\n\n4.1 Where we are\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlot out each of the pattern-book functions on a suitable domain. pnorm(), dnorm(), exp(), sin(), sqrt(), log(),\nDefine a recip() function using makeFun().\nDefine an identity() function using makeFun(). (The identity function returns its input unaltered.)\nDefine a power_law() function using makeFun(). Example of a power-law function: \\(y^{2.4}\\)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "UATX/MOSAIC Calculus",
    "section": "",
    "text": "This is the home page for both terms of the two-term UATX/MOSAIC Calculus sequence. The course has no specific pre-requisites and is suited both to those who have no previous experience with Calculus and those who have taken an AP or IB year-long calculus sequence. The UATX Calculus sequence is designed to replace the entire multi-term traditional sequence—Calc I, II, III, differential equations, linear algebra—for STEM students and is highly relevant to economics, biology and medicine, data science, public policy, physics, and chemistry but does not emphasize “pure” (theoretical) mathematics or proof.\nPlease read the Basics page for course policies and such.\nAll of us are busy people and need to regulate how much time we spend on each activity. For UATX calculus, make sure to complete the readings and reading questions. The chapter-by-chapter exercises are also important for learning and as a component of the grade, but you are not obliged (unless otherwise stated) to do all the exercises. More is better. Exercises marked as “in-class” are not required homework.\nHomework submission link"
  },
  {
    "objectID": "index.html#day-by-day-schedule",
    "href": "index.html#day-by-day-schedule",
    "title": "UATX/MOSAIC Calculus",
    "section": "Day-by-day schedule",
    "text": "Day-by-day schedule\n\n\n\n\n\n\n7. Tuesday 21 January\n\n\n\nTopics: Graphics and parameters.\nReading: MOSAIC Calculus Chapter 7 & Chapter 8 and their associated reading questions. Why two chapters in one day? As it happens, Chap. 7 is a rehash of what you have already seen about graphing data from the QR2 course.\nStart on exercises for Chaps. 7 & 8. Due Thurs and Fri respectively\n\n\n\n\n\n\n\n\n8. Thursday 23 January\n\n\n\nTopics: Assembling functions\nReading: MOSAIC Calculus Chapter 9 & its associated reading questions.\n\n\nAssignment Due: Chapter 7 exercises\n\n\n\n\n\n\n9. Friday 24 January\n\n\n\nTopics: Fitting function features\nNote: We are covering Ch 11 and deferring Chapter 10 until Tuesday.\nReading: MOSAIC Calculus Chapter 11 & its associated reading questions.\nAssignment Due: Chapter 8 exercises\n\n\n\n\n\n\n\n\n10. Tuesday 28 January\n\n\n\nTopics: Fitting function features\nNote: Chapter 10 today!\nReading: MOSAIC Calculus Chapter 10 & its associated reading questions.\nAssignment Due: Chapter 11 exercises\n\n\n\n\n\n\n\n\n11. Thursday 30 January\n\n\n\n\n\n\n\n\n\n\n\n\n12. Friday 31 January\n\n\n\n\n\n\n\n\n\n\n\n\n13. Tuesday 4 February\n\n\n\n\n\n\n\n\n\n\n\n\n14. Thursday 6 February\n\n\n\n\n\n\n\n\n\n\n\n\n15. Friday 7 February\n\n\n\n\n\n\nMid-term break"
  },
  {
    "objectID": "index.html#recent-history",
    "href": "index.html#recent-history",
    "title": "Calc I & II at University of Austin",
    "section": "Recent history",
    "text": "Recent history\n\n\n\n\n\n\n1. Tuesday 7 January, 2025\n\n\n\nTopics: Orientation to course resources\nReading:\n\nMOSAIC Calculus Preface\nMOSAIC Calculus Chap 1: Quantity, function, space and reading questions.\n\n\n\n\n\n\n\n\n\n2. Thursday 9 January\n\n\n\nTopics:\n\nClearing up any start-up problems\nMath and computing notation for MOSAIC Calculus\n\nReading: MOSAIC Calculus Chap 2: Notation and reading questions\nAssignments due: - Chap 1 Exercises\n\n\n\n\n\n\n\n\n3. Friday 10 January\n\n\n\nTopics: Computing for calculus with R\nReading: MOSAIC Calculus Chap 3 Computing with R and reading questions\nAssignment due: Chapter 2 Exercises"
  },
  {
    "objectID": "index.html#further-out-i.e.-tentative",
    "href": "index.html#further-out-i.e.-tentative",
    "title": "UATX/MOSAIC Calculus",
    "section": "Further out (i.e. tentative)",
    "text": "Further out (i.e. tentative)\n\n\n\n\n\n\n7. Tuesday 21 January\n\n\n\n\n\n\n\n\n\n\n\n\n8. Thursday 23 January\n\n\n\n\n\n\n\n\n\n\n\n\n9. Friday 24 January\n\n\n\n\n\n\n\n\n\n\n\n\n10. Tuesday 28 January\n\n\n\n\n\n\n\n\n\n\n\n\n16. Tuesday 11 February\n\n\n\n\n\n\n\n\n\n\n\n\n17. Thursday 13 February\n\n\n\n\n\n\n\n\n\n\n\n\n18. Friday 14 February\n\n\n\n\n\n\n\n\n\n\n\n\n19. Tuesday 18 February\n\n\n\n\n\n\n\n\n\n\n\n\n20. Thursday 20 February}\n\n\n\n\n\n\n\n\n\n\n\n\n21. Friday 21 February\n\n\n\n\n\n\n\n\n\n\n\n\n22. Tuesday 25 February\n\n\n\n\n\n\n\n\n\n\n\n\n23. Thursday 27 February\n\n\n\n\n\n\n\n\n\n\n\n\n24. Friday 28 February\n\n\n\n\n\n\n\n\n\n\n\n\n25. Tuesday 4 March\n\n\n\n\n\n\n\n\n\n\n\n\n26 Thursday 6 March\n\n\n\n\n\n\n\n\n\n\n\n\n27. Friday 7 March\n\n\n\n\n\n\n\n\n\n\n\n\n28. Tuesday 11 March\n\n\n\n\n\n\n\n\n\n\n\n\n29 Thursday 13 March\n\n\n\n\n\n\n\n\n\n\n\n\n30. Friday 14 March"
  },
  {
    "objectID": "index.html#already-past",
    "href": "index.html#already-past",
    "title": "UATX/MOSAIC Calculus",
    "section": "Already past",
    "text": "Already past\nSchedule items will be moved here (in reverse chronological order) as an archive."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Class notes and posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nJan 17, 2025\n\n\n2025-01-17 class notes\n\n\nDTK \n\n\n\n\nJan 17, 2025\n\n\n2025-01-21 class notes\n\n\nDTK \n\n\n\n\nJan 16, 2025\n\n\n2025-01-16 class notes\n\n\nDTK \n\n\n\n\nJan 14, 2025\n\n\n2025-01-14 class notes\n\n\nDTK \n\n\n\n\nJan 10, 2025\n\n\n2025-01-10 class notes\n\n\nDTK \n\n\n\n\nJan 9, 2025\n\n\n2025-01-09 class notes\n\n\nDTK \n\n\n\n\nJan 7, 2025\n\n\n2025-01-07 class notes\n\n\nDTK \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2025-01-14-notes/index-01-14-2025.html",
    "href": "posts/2025-01-14-notes/index-01-14-2025.html",
    "title": "UATX Calc-I-II, AY 2025",
    "section": "",
    "text": "4 2025-01-14 class notes\n\n4.1 Where we are\nActivities we didn’t get to on Friday\n\n\n\nListing 1\n\n\n\n\n\n\n\n\n\n\n\n\nPlot out each of the pattern-book functions on a suitable domain. pnorm(), dnorm(), exp(), sin(), sqrt(), log(),\nDefine a recip() function using makeFun().\nDefine an identity() function using makeFun(). (The identity function returns its input unaltered.)\nDefine a power_law() function using makeFun(). Example of a power-law function: \\(y^{2.4}\\)\n\n\n\n4.2 Spaces, graphs, and graphics\nComposition of input and output spaces in slice_plot(). link\nMapping from (part of?) input space to output space.\n\n4.2.1 2-d input spaces.\n\nCan compose input space with output space to get a 3-dimensional space. Mathematicians like this because the surfaces are beautiful, especially when you can interact with them.\n\nExample: \nThe above example is quite complicated and relates to physics/engineering: a wave packet, and such.\nOf more general use in modeling are simpler functions that resemble terrain locally. The word “local” will be important. Calculus provides tools for translating between the local and the global.\n\n\n\nf &lt;- doodle_fun(~ w & z, seed=101)\nsurface_plot(f(w, z) ~ w & z, domain(w=-5:5, z=-5:5))\n\nLoading required namespace: plotly\n\n\n\n\n\n\nWe will tend to use “contour plots” instead. It’s easier to make measurements on them, but you have to learn how.\n\ncontour_plot(f(w, z) ~ w & z, domain(w=-5:5, z=-5:5), fill_alpha = 0.5)"
  },
  {
    "objectID": "posts/2025-01-16-notes/index-01-16-2025.html",
    "href": "posts/2025-01-16-notes/index-01-16-2025.html",
    "title": "UATX Calc-I-II, AY 2025",
    "section": "",
    "text": "5 2025-01-16 class notes\n\n5.1 Administration\n\nI want to arrange a 5-10 minute meeting (or longer, if you want) with each of you, just to get to know you a little.\n\nI’m free the rest of this morning, and from about 2:30 - 4:00 this afternoon. Or tomorrow.\n\nI’m going to start looking at reading questions, exercises, and such on a regular schedule.\n\nIf you are still shakey about submitting your work, let’s fix it!\nI want to see submissions from all of you on every document from now on.\n\nGrading. The STEM faculty have set a rule for instructors about grading.\n\n\nHalf or more of graded content should be presented and done in a classroom setting.\n\n\nI’m thinking to make this about 50%. Split more or less evenly between class participation and short (15 min) inclass quizzes roughly once a week.\nI won’t necessarily tell you in advance about such a quiz. If you need to make one up, we can do it in my office.\nI’ll adopt a more formal way of keeping track of contributions in class—random sampling. Don’t read too much into this, and absolutely feel free to chip in whenever you want or fend off a question that you would rather someone else answer.\n\nFor instance ….\ntodays_roster()\n\n5.1.1 Class roster for Thu Jan 16\n\nMax Weinstein\nMax Litvinenka\nAlmar Tishenko\nNicole Kargin\nIan Wicht\nSimon Rinehart\nAlistair Haglund\nGrace Price\nEverett McAlister\n\n\n\n\n5.2 Where we are\n\nYou have been introduced to two systems for notation:\n\nmore or less traditional math notation\n{mosaicCalc} computer notation\n\nWe’ve talked about three big concepts you should be becoming very familiar with:\n\nSpace and dimensionality\n\nWhen I write \\(\\sin(x)\\) or sin(x) I’m talking about the input coming from a space named x.\nWhen I write \\(f(x,y) \\equiv y \\sin(x)\\) (or f &lt;- makeFun(y*sin(x) ~ x & y)) the input space has two dimensions.\n\nQuantity\n\nthe amount of some stuff.\neach quantity has in principle two components:\n\na number\nunits that specify how the quantity is measured, e.g. m/s or m/s2\n\nGotcha! We’ll use the word “dimension” to describe the “kind of stuff”, for instance, M L T-2. But you’ll have to determine from context whether we’re talking about the dimension of a space or the dimension of a quantity. (Always feel free to ask!) There is a relationship between to two meanings of “dimension,” but we don’t need to get into it.\n\nFunction - A relationship between one or more (well, … “zero or more”) inputs and a single output. - The space of inputs is called the domain. - The space of output is called the range\n\n\nAside: Good (simple) quiz questions might be - “Define what we mean by a function?” - “What is the dimensionality of the input space to some function \\(f()\\)?” (that I’ll describe) - “What’s the conceptual difference between the units of a quantity and the dimension of that quantity?”\n\nGraphics\n\nYou’ve learned to make two kinds of graphics using {mosaicCalc} software:\n\nA “graph” of a function of one input.\nA “contour plot” of a function of two inputs.\n\nYou know that you have to tell the computer which part of the input space (“domain”) to show in the graph and that you do this with an argument that looks like domain(x=-5:5, y = 10:50)\nAs we move along, we’ll need a few other types of graph, e.g.:\n\nparametric plot\nvector field (or “flow” field)\n\nMost of you learned pretty well in high school how to “read” a graph of \\(f(x)\\).\nYou’re learning how to read a contour plot, e.g. interpret it as a landscape, figure out the value of the output when the input is between two contours, figure out whether movement in a particular direction leads you uphill or downhill.\n\n\nAside: A good quiz question would be a completely artificial task … “Draw a few contours of this function of two variables.”\n\n\n\n\n\n\n\n\n\n\n\n5.3 Today’s topic: “Pattern-book functions”\nSimile: “Shall I compare thee to a summer day?”\nMetaphor: “… and summer’s lease hath all too short a date.”\nA metaphor for the pattern-book functions … styles of painting\n\n\n\n\n\n\n\n\n\nImpressionism\nAmerican Primitive\nPop art\nCubism\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEach pattern-book function is a reference example of each style of art. We will use many variations on each style and call these “basic modeling functions.”\nShapes of the pattern book functions:\n\n\n\n\nName\nTraditional notation\nR notation\n\n\n\n\nexponential\n\\(e^x\\)\nexp(x)\n\n\nlogarithm (“natural log”)\n\\(\\ln(x)\\)\nlog(x)\n\n\nsinusoid\n\\(\\sin(x)\\)\nsin(x)\n\n\nsquare\n\\(x^2\\)\nx^2\n\n\nidentity\n\\(x\\)\nx\n\n\none\n\\(1\\)\n1\n\n\nreciprocal\n\\(1/x\\) or \\(x^{-1}\\)\n1/x\n\n\ngaussian\n\\(\\dnorm(x)\\)\ndnorm(x)\n\n\nsigmoid\n\\(\\pnorm(x)\\)\npnorm(x)\n\n\n\nYou need to:\n\nFrom the name of a pattern-book function, be able to draw a pretty accurate graph of the reference example.\nFrom a graph of the reference example, say the name of the function\nFor the functions that we write as formulas (e.g. square is \\(x^2\\)), know the formula. Other functions you just need to know the name, the traditional notation, and the R notation.\nKnow the domain of each pattern-book function.\nKnow the exact output value for one or more “special” values of the input, e.g. \\(\\ln(1)\\) or \\(\\sin(0)\\).\nLater: For each function, know a modeling context where use of the function is standard. E.g.\n\nexponential: radioactive decay, cooling\nsinusoid: waves\nsigmoid: growth in a finite environment\n\nEventually: Wonder how you could ever have confused an exponential function with a power-law function.\nLater: say how a basic-modeling function differs from the reference example\nLater: put together entirely new functions by combining pattern-book functions.\nLater: memorize the derivative and anti-derivative of each pattern-book function.\n\n\n\n5.4 Activity\nIn small groups: Pick three pattern-book functions. Find some special inputs where the output is easy to remember, e.g. the output is zero or the output is an integer.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page."
  },
  {
    "objectID": "posts/2025-01-16-notes/index-01-14-2025.html",
    "href": "posts/2025-01-16-notes/index-01-14-2025.html",
    "title": "UATX Calc-I-II, AY 2025",
    "section": "",
    "text": "5 2025-01-16 class notes\n\n5.1 Administration\n\nI want to arrange a 5-10 minute meeting (or longer, if you want) with each of you, just to get to know you a little.\n\nI’m free the rest of this morning, and from about 2:30 - 4:00 this afternoon. Or tomorrow.\n\nI’m going to start looking at reading questions, exercises, and such on a regular schedule.\n\nIf you are still shakey about submitting your work, let’s fix it!\nI want to see submissions from all of you on every document from now on.\n\nGrading. The STEM faculty have set a rule for instructors about grading.\n\n\nHalf or more of graded content should be presented and done in a classroom setting.\n\n\nI’m thinking to make this about 50%. Split more or less evenly between class participation and short (15 min) inclass quizzes roughly once a week.\nI won’t necessarily tell you in advance about such a quiz. If you need to make one up, we can do it in my office.\n\n\n\n5.2 Where we are\nActivities we didn’t get to on Friday\n\n\n\nListing 1\n\n\n\n\n\n\n\n\n\n\n\n\nPlot out each of the pattern-book functions on a suitable domain. pnorm(), dnorm(), exp(), sin(), sqrt(), log(),\nDefine a recip() function using makeFun().\nDefine an identity() function using makeFun(). (The identity function returns its input unaltered.)\nDefine a power_law() function using makeFun(). Example of a power-law function: \\(y^{2.4}\\)\n\n\n\n5.3 Spaces, graphs, and graphics\nComposition of input and output spaces in slice_plot(). link\nMapping from (part of?) input space to output space.\n\n5.3.1 2-d input spaces.\n\nCan compose input space with output space to get a 3-dimensional space. Mathematicians like this because the surfaces are beautiful, especially when you can interact with them.\n\nExample: \nThe above example is quite complicated and relates to physics/engineering: a wave packet, and such.\nOf more general use in modeling are simpler functions that resemble terrain locally. The word “local” will be important. Calculus provides tools for translating between the local and the global.\n\n\n\nf &lt;- doodle_fun(~ w & z, seed=101)\nsurface_plot(f(w, z) ~ w & z, domain(w=-5:5, z=-5:5))\n\nLoading required namespace: plotly\n\n\n\n\n\n\nWe will tend to use “contour plots” instead. It’s easier to make measurements on them, but you have to learn how.\n\ncontour_plot(f(w, z) ~ w & z, domain(w=-5:5, z=-5:5), fill_alpha = 0.5)"
  },
  {
    "objectID": "posts/2025-01-21-notes/index-01-21-2025.html",
    "href": "posts/2025-01-21-notes/index-01-21-2025.html",
    "title": "UATX Calc-I-II, AY 2025",
    "section": "",
    "text": "7 2025-01-21 class notes\nAn unexpected snow day! I’m going to have to improvise a little.\nHere are a few chunks for me to work in on my tablet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe only change is a different R function, gf_point() that plots a response variable against a single explanatory variable, e.g., Galton &lt;- gf_point(height ~ mother). There\n\n7.1 Activity\n\nPlot some data on the screen.\nCopy it over to your board.\nDraw a version of a basic modeling function that aligns with the data.\n\nSome pattern-book functions will work better than others. fitModel() makes you choose the function, then does the rest automatically.\nIf we expanded fitModel() so that it would go through a large library of functions, try them all, and then pick the one that works best overall, we would be doing “machine learning.” (There would be additional technicalities, which are discussed a little in Spiegelhalter Ch. 4. “Cross-validation” is one of the methods that can come into play, but we won’t talk about that in this Calculus course.)\nHow do you think the computer could do what you do by eye automatically? We need a framework and a procedure.\n\n\n7.2 Framework Part 1: Input and output scaling\n\n\n7.3 Framework Part 2: Residuals\nWe are going to make the residuals as small as possible.\n\n\n7.4 Procedure: Guess, check, and improve\nThis is where you can start to talk about finite diferences, slopes, and increments. We will eventually change this into the language of “derivatives.” The “back propagation” used in Deep Learning neural networks is nothing more than this, although on an immense scale.\n\n\n7.5 Fitting functions to data\nWe’re going to stretch and shift the input and output spaces so that the pattern-book function overlies the data plotted. Imagine that we have a projector with separate zoom-in/zoom-out for the horizontal and vertical planes. As for pan—moving the image sideways or up and down—this doesn’t require any cleverness.\nTalk about residuals.\nHow do we set the scaling parameters to align the function image with the data?\n\nIt can be done.\nfitModel() is a pretty good way to do it.\n\n\n\n7.6 Activity"
  },
  {
    "objectID": "posts/2025-01-17-notes/index-01-17-2025.html",
    "href": "posts/2025-01-17-notes/index-01-17-2025.html",
    "title": "UATX Calc-I-II, AY 2025",
    "section": "",
    "text": "6 2025-01-17 class notes\nLet’s just call it “Calculus” instead of Calc I/II\n\n6.1 Where we are\nReview of the chapters. Each student picks one chapter.\n\n\n6.2 Describing functions with words\nThese words are used to describe local properties, that is, over a “finite” part of the domain.\n\nslope\nconcavity\ncontinuity\nmonotonicity\nperiodicity\nasymptotes\nlocal extrema\n\nFunctions can change their properties as you move from one locale in the domain to another.\n\n\n6.3 Building new functions\nWe will build new functions from old ones. There are several techniques, that are talked about in the next block.\n\ninput scaling\noutput scaling\nlinear combination\nmultiplication\ncomposition\n\nThere are also many methods to build functions that approximate data. You’ve seen this with annot = \"model\" in QR2, but in Calculus we will use different software because we will focus on continuous functions.\n\n\n6.4 Activity\n\nSummarize each of the pattern-book functions in terms of these descriptive words.\n\n\n\nOn the board, sketch out some imagined functions over some finite domain that have these properties:\n\n\ndownward sloping but concave up.\ndiscontinuous at a point\nnon-monotonic and concave down.\nvertical asymptote at \\(x=1\\)\nleft horizontal asymptote at 0, right at 0 as well\na function with two local extrema (over the domain you are showing)\n\n\nAre the functions described below possible?\n\n\nContinuous with two local maximum but no local minimum.\nSwitching from concave up to concave down as \\(x\\) increases\nMonotonic with a local maximum\nHave both left and right horizontal asymptotes and also a vertical asymptote at \\(x=5\\).\n\n\n\n6.5 Quiz (15 minutes)\nPossibly: review quiz"
  },
  {
    "objectID": "index.html#archive",
    "href": "index.html#archive",
    "title": "UATX/MOSAIC Calculus",
    "section": "Archive",
    "text": "Archive\n\n\n\n\n\n\n1. Tuesday 7 January, 2025\n\n\n\nTopics: Orientation to course resources\nReading:\n\nMOSAIC Calculus Preface\nMOSAIC Calculus Chap 1: Quantity, function, space and reading questions.\n\n\n\n\n\n\n\n\n\n2. Thursday 9 January\n\n\n\nTopics:\n\nClearing up any start-up problems\nMath and computing notation for MOSAIC Calculus\n\nReading: MOSAIC Calculus Chap 2: Notation and reading questions\nAssignments due: - Chap 1 Exercises\n\n\n\n\n\n\n\n\n3. Friday 10 January\n\n\n\nTopics: Computing for calculus with R\nReading: MOSAIC Calculus Chap 3 Computing with R and reading questions\nAssignment due: Chapter 2 Exercises\n\n\n\n\n\n\n\n\n4. Tuesday 14 January\n\n\n\nTopics: Visualizing functions\nReading: MOSAIC Calculus Chap 4 Visualizing functions and reading questions due before class\nAssignment due: Chapter 3 Exercises\n\n\n\n\n\n\n\n\n5. Thursday 16 January\n\n\n\nTopics: Our pattern book functions\nReading: MOSAIC Calculus Chap 5 Pattern book functions and reading questions due before class\nAssignment due: Chapter 4 Exercises\n\n\n\n\n\n\n\n\n6. Friday 17 January\n\n\n\nTopics: Describing functions\nReading: MOSAIC Calculus Chap 6 Describing functions and reading questions due before class\nAssignment due: Chapter 5 Exercises"
  },
  {
    "objectID": "quizzes-rosters-etc/quiz-2025-01-17.html",
    "href": "quizzes-rosters-etc/quiz-2025-01-17.html",
    "title": "Calc I/II quiz",
    "section": "",
    "text": "Student name: _____________. Do what you can in 15 minutes.\n\nWhat are three fundamental dimensions for quantities? (Hint: They are represented by single letters.)\n\n \n\nUsing the fundamental dimensions from question (1), write down the dimension of each of these “kinds of stuff.”\n\nArea\nVelocity\nFlow, e.g. volume per minute\n\n\n \n\nWhat is the dimension of the input space for each of these functions? (Hint: don’t overthink things.)\n\n\\(f(x, t) \\equiv \\sin(x) e^t\\)\n\\(g(a, b, c) \\equiv \\sqrt{\\frac{a^2 - b^3}{\\ln(c)}}\\)\n\\(h(u, v) \\equiv 1\\)\n\n\n \n\nDraw a horizontal and a vertical line to represent the coordinate axes. Then draw a graph of dnorm(). Put 2 or 3 tick marks on the vertical axis with numerical values.\n\n \n \n\nMost of the pattern-book functions have a domain that is the entire number line, that is \\(-\\infty &lt; x &lt; \\infty\\). Name two pattern-book functions where this is not true. (Hint: One of the two is missing only a single point on the number line.)\n\n \n\nFigure 1 are contour plots showing two different functions.\n\n\n\n\n\n\n\n\n\n\n\n\n(a) \\(f(x, y)\\)\n\n\n\n\n\n\n\n\n\n\n\n(b) \\(g(x, y)\\)\n\n\n\n\n\n\n\nFigure 1: Contour plots for Question 6\n\n\n\n\n6(a) Which function has the higher output value at \\((x=0, y=0)\\)?\n6(b) Each of the functions has a “mountain.” Mark the top of the mountain with an x and then give numerically the input coordinates (approximately) that correspond to that top.\n6(c) The location of a spring (that is, a source of water) is marked on one graph. Trace out, approximately, the path taken by the stream stemming from that spring.\n\n\nConsider the contour plot below. Draw in plausible contours for output values 0 and 8."
  }
]