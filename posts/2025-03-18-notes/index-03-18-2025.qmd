---
author: DTK
date: 2025-03-18
number-offset: 27
format: live-html
---

```{r include=FALSE}
library(mosaicCalc)
library(dplyr)
```

# 2025-03-18 class notes

## Complex exponentials

$e^{i\omega t}$ as a replacement for $sin(\omega t)$.

- 2nd derivative is proportional to negative itself.
- Differentiation is a matter of multiplying by $i \omega$.
- Multiplication of one sine by another is akin (sort of) to advancing the argument.

Modeling a pendulum.

ASK: What do we know about the acceleration along the arc of swing.

i. It's zero at an angle of zero.
ii. It's an odd function, meaning $f(-\theta) = - f(\theta)$
iii. We can expand this out as a Taylor polynomial: first and third-order terms.

**Equation of motion:**

$$\partial_{tt} \theta(t) = - \omega^2 \theta(t)$$
Substitute in $a \sin(\omega t)$.

NOW, add in air resistence. What do we know about air resistence?

i. It's a function of speed
ii. It's odd
iii. It's nil when the velocity is zero.

**Equation of motion**

$$\partial_{tt} \theta(t) = -\omega^2 \theta(t) + \nu \partial_t \theta(t)$$

Plug in $\sin(\omega t)$: doesn't quite work.

Plug in $e^{i k t}$ giving

$$- k^2 e^{ikt} = - \omega^2 e^{ikt} + i \nu \omega k e^{ikt}$$
or

$$\omega^2 -i \nu \omega - k^2 = 0$$

## Another Taylor expansion

Expand $\ln(x + 1)$ around $x=0$.

One team writes the derivatives, the other team sets up the polynomial waiting for the derivatives. 

Implement on the computer.

```{webr-r}

```


## How high a power do I really need for the polynomial?

## Exponential
```{webr-r}
myexp <- function(x) {
  if (x < 0) 1/myexp(-x)
  else {
    power <- 0
    # replace this with recursion
    while(x > 0.01) {
      x <- x / 2
      power <- power + 1
    }
    exp_tailor(x)^(2^power)
  }
}


exp_tailor <- function(x){
  1 + x + x^2/2 + x^3/6 #+ x^4/24
}
```

## Sinusoid

```{webr-r}
mysin <-function(x) {
  x <- x %% (2*pi)
  if (x < 0) -mysin(-x)
  else if (x > pi) - mysin(x - pi)
  else if (x > pi/2) mysin(pi - x)
  else if (x > pi/4) cos_taylor(x - pi/2)
  else sin_taylor(x)
}

sin_taylor <- function(x) {
  x - x^3/6. + x^5/120. - x^7/5040.
}

cos_taylor <- function(x) {
  1 - x^2/2 + x^4/24 - x^6/720
}

```

### Logarithm

It's easiest to write the Taylor series of $\log(1+x)$ around $x = 0$

- Find successive derivatives of $\log(1+x)$ and evaluate at $x=0$. It becomes very easy.

- Turn these into the multipliers of a Taylor polynomial by dividing the $n$^th^ derivative by $n!$

- Use this polynomial to calculate $\log(1+x)$.

```{r}
logxp1_taylor <- function(x){
  x - x^2/2 + x^3/3 - x^4/4  + x^5/5 #- x^6/6 + x^7/7 - x^8/8
}
```

We can then write `log_taylor(x)` as

```{webr-r}
log_taylor <- function(x) logxp1_taylor(x + 1)
```

Try this out for `x=2` and observe the bad answer compared to `log(3)`. The answer gets even worse for bigger `x`. What's wrong? Convergence.

Now use manipulations to squeeze `x` closer to `.

```{webr-r}
log_taylor <- function(x) {
  if (x < 0) return(NaN)
  if (x < 1) return(-log_taylor(1/x))
  if (x > 1.0001) return(2*log_taylor(sqrt(x)))
  if (x > 2) return(log_taylor(x/2) + 0.693147180559945)
  logxp1_taylor(x - 1)
}

```

## A least-squares approach.

Evaluate $\log(x + 1)$ at a few points.

```{webr-r}
Pts <- 
  tibble::tibble(x = seq(0, .01, length=1000)) |>
  mutate(y = log(x + 1))
 
approx <- lm(y ~ x + I(x^2), data = Pts) |> makeFun()

slice_plot(approx(x) - log(x+1) ~ x, domain(x = 0:0.01)) |> 
  slice_plot(logxp1_taylor(x) - log(x+1) ~ x, 
             color = "blue", 
             linewidth = 4, alpha = 0.3) 
```

## Modeling project: Speed of a satellite

[Write-up from Workbook](https://dtkaplan.github.io/MC-Workbook/Block-1-models.html#project-2-orbit-dimensions)



