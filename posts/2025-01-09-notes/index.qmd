---
author: DTK
date: 2025-01-09
number-offset: 1
---

# 2025-01-09 class notes

```{r include=FALSE}
library(mosaicCalc)
```

## Where we are

- We've talked about *modeling*, the construction of a mathematical representation of the context of interest.
    i.You had a very short time to lay out the quantities that might enter in to a model of a baseball game during a stop in the action, e.g. between innings or after a second out.
    ii. You got a glimpse that the intended purpose for a model shapes what kind of model (e.g. the quantities in (i)) is appropriate.
    iii. A good mantra for modeling is that "All models are wrong. Some models are useful." 
    
- You've gotten a brief introduction to three mathematical concepts that underlie modeling and calculus in general.
    i. Quantities (and their dimensions/units). 
        a. Probably you are not completely clear on the difference between "units" and "dimensions." Don't worry. We will come back to it in a couple of weeks.  
    ii. Functions, a relationship between zero or more inputs and a single output. 
        a. Mathematical functions with zero inputs are fairly called "constants." But it simplifies notation if we can consider 1 or 0 or whatever to be a "function," even though it always gives the same output.
    iii. Spaces. A set of possibilities. 
        a. Spaces have a dimension, but this use of the word is only tangentially replaced to the "dimension" associated with a quantity.
        b. Your intuition of position on a line (one dimensional), position in a plane (two dimensional), and position in everyday 3-dimensional space will suffice.
        c. The mathematical idea of "space" is an abstraction and generalization of the intuitive, everyday notion. So you'll find yourself working with spaces that can have tens or hundreds or any (integer) number of dimensions. There is even an obscure mathematical idea of non-integer dimensions; "fractals" are best known. We will not be working with them.
        d. You know intuitively how to move around physical, 1-, 2-, and 3-dimensional spaces. You haven't yet learned the methods of moving around high-dimensional spaces. Be patient.
        
Go over chapter 1 reading questions.

## NOTATION: our topic for today.

The notation you learned in high-school involves **pictures**, which you have learned to interpret. There are individual **tokens**, say 2 and $x$ as well as all the other letters, numbers, symbols. The geometrical arrangement of these tokens in a compound picture indicates what mathematical idea is being denoted. 
You're used to pictures like $x^2$ or $\sin(2 \pi t / P)$. There are also pictures that are obscure until you get to higher math. For example, in Calculus, pictures like

$$\int_0^\infty \frac{1}{x^2}dx$$

Many people (like me) think these picture can be beautiful, but there are several shortcomings.

i. It can require a lot of experience to understand the meaning of many pictures because very similar pictures can have very different meanings. For instance:

$$\int_0^\infty \frac{1}{x^2}dx\ \text{ is a number, but } \int_x^\infty \frac{1}{x^2}dx\ \text{is a function}.$$

ii. The pictograph-based notation is not easily used with computers. Most people in college-level calculus can use only a pencil or pen to draw the picture. They are devilishly tedious to type. And interpreting the picture typically relies on knowledge of the intent of the picture drawer. 

iii. Professionals, like me, have learned markup for typing the pictures. The most widely used professional system is TeX, which has been around for 50 years. I'm pretty fluent in TeX and can write a picture almost as fast as you can draw one. You do not need to use TeX, but knowing it gives fantastic insight into the structure of a mathematical expression.

iv. We will be using a typewritten notation for communicating mathematical intent to the computer and you will gradually learn to use it for communicating with other people in the class.

v. But we will also use traditional notation, because you have already invested eight to ten years learning it. Talking to you, I'll use the traditional notation a lot of the time, and computer notation increasingly often as we move along. Questions like, "Can you draw a picture of that expression?" are always in-bounds. But many important mathematical actions and ideas that have not standard equivalent in picture-based notation. Examples: Randomize. Repeat. Accumulate. And often, traditional mathematical instructions have to use natural language words, e.g. 

$$\text{Solve}\ 3 x + 4 = 7\ \text{for}\ x.$$

vi. Finally, we will not have much use for the mathematical equal sign: $=$. I was taught in a traditional way, with $=$ all over the place. So I'll slip up, and maybe I don't appreciate how often I need $=$. 

Call out "EQUALS" whenever I use $=$ in mathematical notation. But we aware that our computer notation uses `=` from time to time, but in none of these times is it equivalent to mathematica $=$.

## Kinds of things

Some advice ... Whenever you encounter a bit of notation, make sure to ask yourself *what kind of thing* is being represented by that notation.

### Names 

Will almost always be written using Roman letters. Some rules:

1. Names **always** start with a letter. Never a numeral.
2. UPPER CASE and lower case are different.
3. We will use letters idiomatically, that is, using rules of our own invention.
    i. Letters like u, v, w, x, y, z typically refer to a one-dimensional space, often the number line, but "quantity line" might be a more precise term. We'll use number-line.
    ii. Letters like a, b, c, A, B, C refer to specific quantities, even if we don't yet have a specific **value** for that quantity in hand.
    iii. We will use non-numerical subscripts and superscripts, e.g. $x_0$ or $x^\star$. These refer to a special point in the associated space.
    iv. We will use f, g, h, and a handful of others to be a **pronoun** for a function. We will usually write the **name** of a function with parentheses following the letters, e.g. f() or h().


### Numerals

A *numeral* is the character representation of a number typically constructed from digits, the $-$ sign, decimal point, etc.. Mostly this is familiar. Some numbers have representations not made of digits. You already know about $\pi$.

Some numerals have additional characters.

Name | Traditional | Computer
-----|-------------|---------
Scientific notation | $4.72 \times 10^8$ | `4.72e8`
Rational numbers | $\frac{3}{4}$ | `(3/4)`
Imaginary numbers | $3i$ | `3i`

How to find out if something is correct: Try the computer symbol `e` as a name. What do you get?

### Functions

The functions we work with will typically have a name, and often we will construct a new function and name it ourselves.

i. Traditional notation gives you a choice: no parens, parens, some other kind of bracket.

$$ \sin \pi, \ \ \ \sin(\pi), \ \ \ \ \ \sin[\pi]$$

ii. Use only the parenthesis form of a function name, e.g.
$\sin()$, $\log()$, $\exp()$ or, in computer notation, `sin()`, `log()`, `exp()`.

iii. Wondering which logarithm $\log()$ refers to? Hold on to that. We will almost always be using the so-called "natural logarithm." If you don't know what this is, you are far from the only person. There's plenty of time to find out.

iv. The above style of notation can be called "functional notation." There are very familiar functions that use a different system for notation, called **infix**. Infix functions, $+$, $-$, $\times$, $/$ take **two** arguments, one placed on the left-hand side of the name the other on the right-hand side of the name, do not involve parentheses. 

    a. Examples:
        - $3+2$ stands for something that in functional notation might be written $plus(3, 2)$.
    b. You can use infix notation in R, and there is a large number of infix functions. `+`, `-`, `*`, `/`, `||`, `%in$`, and so on, including the "tilde" `~` that's used to construct a "tilde expression." (See @sec-def-functions.) You're familiarity with traditional infix notation will get you through. Just be aware that the *canonical* syntax for a function is the "name followed by parentheses."
    c. By way of example of the last sentence in (b), here's an R command that will accomplish $3 + 2$: ``+``(3, 2)`. The back-quotes (which you will never need to use) are R's escape mechanism to allow otherwise invalid characters to be used as names.

### Defining functions {#sec-def-functions}

High-school notation is incredibly sloppy when it comes to working with functions. You've seen $y = m x + b$. Is this an equation (yes), a function defintion (sometimes), or a "constraint" (complicated).

We will use a consistent notation that yells at you that a function is being defined. 

**Traditional notation**: $$\text{snowfall}(t) \equiv a t + b\ .$$ We know that snowfall() is a function because it is a name followed immedidately by an open parenthesis. This has several components:

1. snowfall : the name of the function. (But in narratives the name will be written snowfall() so that we can tell immediately that the name refers to a function.)
2. $(t)$ the function has one input, and we're calling it $t$.
3. $\equiv$ means defined to be.
4. $a t + b$. In this case we are using a **formula** to define the function.
    i. You can tell unambiguously that $t$ is the input, because of the way we wrote snowfall(t) on the left side of $\equiv$.
    ii. $a$ and $b$ are often called **parameters**. We'll return to this later.

**Computer notation**: `snowfall <- makeFun(a * t + b ~ t)`

This has the same four components, but written differently.

1. `snowfall`: the name of the function. 
2. `<-` a computer instruction called variously "assignment" or "naming" or "stored under the name". The result of the computation on the right-hand side of `<-` is the **value** that will be stored under that name.
3. `makeFun()`, the name of a **computer function**. These are the action verbs of computing; they do something with the **arguments** handed over in the parentheses. The job of `makeFun()` is to construct a set of computer instructions, packaging it as a function.  It's unfortunate that we use the word "function" to mean different things: 1) a mathematical relationship between inputs and an output and 2) a computer procedure that packages up computer instructions.
4. `a * t + b ~ t`. This is a special grammatical construction in the computer language called a **tilde expression**. 

    The name comes from the character [~]{style="font-size:2em;"}.

    i. You will use tilde expressions very extensively and for many purposes. The one here is taken apart by `makeFun()`. The R expression on the left-hand side of `~` is a **formula**, that is, a description of a computation. The R expression on the right-hand side tells `makeFun()` that the input name will be `t`. 

`makeFun()` is the right tool for building functions from a **formula**. As we move through the course you will meet other function-building tools. Some examples (which you don't need to understand yet):

- `D()` builds a function that is the derivative of the function specified in the tilde expression, e.g. `D(snowfall(x) ~ x)`. I'll demonstrate:

```{r}
snowfall <- makeFun(a * t + b ~ t)
snowfall
D(snowfall(x) ~ x)
```

- `antiD()` builds the "anti-derivative" of the function specified in the tilde epxression.

```{r}
antiD(snowfall(x) ~ x)
```
- There will be several others, each in good time.

IF TIME, GO OVER EXERCISES.
