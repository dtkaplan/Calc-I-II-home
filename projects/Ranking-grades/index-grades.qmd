---
title: "Ranking by grade"
author: DTK
date: last-modified
format: live-html
desc: "Applying a sports ranking method to the Registrar database"
categories: [linear algebra]
---

```{r include=FALSE}
library(LSTbook)
library(ggplot2)
library(tidyr)
```

Re-arrange the grades into a matrix
```{r message=FALSE}
Whole <- LSTbook::Grades |>
  left_join(LSTbook::Sessions) |>
  left_join(LSTbook::Gradepoint)
```

How many students did each instructor teach?

```{r}
#| label: grades-42s
nstudents <- Whole |> 
  summarize(count = n(), .by = iid) |>
  arrange(desc(count))
```

Let's look only at instructors with more than 10 students.

```{r}
#| label: grades-42t
Keepers <-
  nstudents |>
  filter(count > 10) |>
  left_join(Whole)
```

## Method

<https://maherou.github.io/Teaching/files/CS317/masseyMethod.pdf>


## Head-to-head competitions

```{r}
#| label: grades-42lu
To <- Keepers |> select(sid, sessionID, gradepoint)
From <- To |>
  rename(sid2 = sid,  gradepoint2 = gradepoint)
All <- To |> left_join(From) |> unique()
Session_pos <- All |>
  select(sessionID) |>
  unique() |>
  mutate(Session_pos = row_number())
Student_pos <- All |>
  select(sid) |>
  unique() |>
  mutate(Student_pos = row_number())

All<- All |>
  filter(sid < sid2) |>
  mutate(pointdiff = gradepoint - gradepoint2) |>
  left_join(Session_pos) |>
  left_join(Student_pos) |>
  left_join(Student_pos |> rename(sid2 = sid, Student2_pos = Student_pos))

M <- matrix(0, nrow = nrow(All), ncol = nrow(Student_pos))

Pos1 <- All |> select(Student_pos) |>
  mutate(pos = row_number() + n()*(Student_pos - 1))
Pos2 <- All |> select(Student2_pos) |>
  mutate(pos = row_number() + n()*(Student2_pos - 1))
M[Pos1$pos] <- 1
M[Pos2$pos] <- -1
rankings <- lm(All$pointdiff ~ M - 1)
Result <- tibble::tibble(ranking = coef(rankings), sid = Student_pos$sid) |> 
  arrange(desc(ranking))
```

Compare ranking to GPA
```{r}
#| label: grades-42lv
Sidebyside <- Whole |> 
  summarize(gpa = mean(gradepoint, na.rm = TRUE), .by = sid) |>
  left_join(Result)

Sidebyside |> ggformula::gf_point(gpa ~ ranking)
```

Now we have the gradepoints in a head to head competition



## SVD approach, not working
Break into an array, students on vertical axis, instructors on horizontal.

MINI- PROJect on cleaning: Who are the duplicates?

```{r}
#| label: grades-42lw
Mat <-
  Keepers |> 
  unique() |> # THERE ARE DUPLICATES
  select(sessionID, sid, gradepoint) |>
  pivot_wider(names_from = sid, 
              values_from = gradepoint,
              values_fn = ~ mean(.x))
Mat[is.na(Mat)] <- 3.5
```

Make into a matrix
```{r}
#| label: grades-42lx
Students <- names(Mat)
Sessions <- Mat$sessionID
Mat2 <- Mat |> select(-sessionID) |>
  unlist() |> as.numeric() |> 
  matrix(nrow = length(Sessions))
```

Do the SVD

```{r}
#| label: grades-42ly
res <- svd( Mat2)
a1 <- res$u[,1,drop=FALSE]
b1 <- res$v[,1,drop=FALSE] |> t()
a2 <- res$u[,2,drop=FALSE]
b2 <- res$v[,2,drop=FALSE] |> t()
```

Show the raw data
```{r}
#| label: grades-42lz
library(reshape2) # for melt
melt( Mat2 ) |> 
  ggplot( aes(x=Var1, y=Var2, fill=value)) +
  geom_tile() +
  scale_fill_gradient2() +
  xlab("") + ylab("Student") 
```

Re-arrange according to principal vectors

```{r}
#| label: grades-52la
inds1 <- order(c(res$u[,1]))
inds2 <- order(c(res$v[,1]))
Sorted <- Mat2[ inds1, inds2 ]
Sorted[1:50,1:50] |> melt() |> 
  ggplot( aes(x=Var1, y=Var2, fill=value)) +
  geom_tile() +
  scale_fill_gradient2() +
  xlab("") + ylab("Student") 
```
