---
title: "Ranking by grade"
author: DTK
date: last-modified
format: live-html
desc: "Applying a sports ranking method to the Registrar database"
categories: [linear algebra]
---


```{r include=FALSE}
library(LSTbook)
library(ggformula)
library(dplyr)
library(ggplot2)
library(tidyr)
library(LSTbook)
source("../../_software/software.R")
```

```{webr-r}
#| autorun: true
#| context: setup
{{< include ../../_software/software.R >}}
```

The task of this modeling project is to construct a ranking of students based on their grades over a college career.

The data come from a small college in the US Midwest. For reasons of anonymity, student names have been replace with unique meaningless ID codes, with all the courses taken by a student and the grades received identified by that student's code. Similarly, the instructor and department indentities are encoded. Also, only about half of the courses taken by each student are included. The students listed graduated in AY 2004/2005.

The data were originally in the form of three data frames in a relational database. We use data wrangling to merge them into a single data `Events` frame where the unit of observation is an event consisting of a single student receiving a grade in a single course.

```{r message=FALSE}
Events <- LSTbook::Grades |>
  left_join(LSTbook::Sessions) |>
  left_join(LSTbook::Gradepoint)
```

To orient you to the variables and their meanings, here are five randomly selected events:

```{r}
Events |> take_sample(n = 5)
```

The `gradepoint` variable is the numerical equivalent of the letter `grade`.

One oddity of the data is that, for a few students, courses were taken some years before the rest of the cohort. Let's wrangle up the distribution of semesters:

```{r}
Semesters <- Events |> 
  mutate(sem = gsub("S(1|2)", "SP", sem)) |>
  summarize(takers = n(), .by = sem) |>
  arrange(desc(takers)) |>
  mutate(keep = ifelse(takers > 400, "keep", "rid"))
Semesters
```

TASK: 
Join `Semesters` with `Events`. Use it to remove students who took any course outside of the most populated 8 semesters.


Most students are familiar with the GPA and its use in ranking students. Here's the calculation written in the `{dplyr}` notation.

```{r}
GPA <- Events |>
  summarize(gpa_raw = mean(gradepoint, na.rm = TRUE), .by = sid)
GPA |> take_sample(n = 5)
```

To be statistically literate, such an estimate of the GPA should come with a confidence interval. We'll calculate the margin of error using stardard textbook formulas. In calculating the margin of error, I'll artificially *double* the $n$ for each student so that we get the magnitude of standard errors we would expect to see if we had *all* the student-grade records.

```{r}
GPA <- Events |>
  summarize(gpa_raw = mean(gradepoint, na.rm = TRUE), 
            gp_var = var(gradepoint, na.rm = TRUE),
            gp_me = 2 * sqrt(gp_var / 2 * n()),
            .lwr = gpa_raw - gp_me,
            .upr = gpa_raw + gp_me,
            .by = sid) |>
  select(sid, .lwr, gpa_raw, .upr)
GPA |> take_sample(n=5)
GPA |> 
  arrange(gpa_raw) |>
  mutate(rank = 1:n()) |>
  gf_segment(.lwr + .upr ~ rank + rank) |>
  gf_point(gpa_raw ~ rank, color = "red", size=0.1)
```

We can do much the same calculation by modeling, but we'll have to "adjust" the confidence intervals by hand to mimic data with the full collection of grades.

```{r}
GPA2 <- Events |> 
  model_train(gradepoint ~ sid) |>
  model_eval(data = tibble(sid = unique(Events$sid)), interval = "confidence") |>
  mutate(.lwr = .output - (.output - .lwr)/sqrt(2), .upr = .output + (.upr - .output)/sqrt(2))
set.seed(101)
GPA2 |>
  take_sample(n=5)
```

Compare GPA with GPA2:

```{r}
Compare <- GPA |> 
  select(sid, gpa_raw) |>
  mutate(gpa2 = GPA2$.output)
Compare |> point_plot(gpa_raw ~ gpa2)
```
  
TASK: Let's speculate on why registrars don't report a GPA with a confidence interval.

TASK: Add in some covariates: semester, class level, class size

```{r}
GPA3 <- Events |> 
  model_train(gradepoint ~ sid + enroll + level + sem) |>
  model_eval(data = tibble(sid = unique(Events$sid), sem="SP2005", level=300, enroll=12), interval = "confidence") |>
  mutate(.lwr = .output - (.output - .lwr)/sqrt(2), .upr = .output + (.upr - .output)/sqrt(2))
set.seed(101)
GPA3 |>
  take_sample(n=5) |>
  select(sid, .lwr, .output, .upr)
```

```{r}
Compare <- Compare |>
  mutate(gpa3 = GPA3$.output)
```

Let's look at the extent to which `dept` or `instructor` plays a role:

```{r}
Events |> 
  model_train(gradepoint ~ enroll + level + sem + dept + iid + sid) |>
  anova_summary()
```

And find the "instructor-adjusted" GPA:
```{r}
GPA4 <- Events |> 
  model_train(gradepoint ~ sid + enroll + level + sem + dept + iid) |>
  model_eval(data = tibble(sid = unique(Events$sid), 
                           sem="SP2005", level=300, enroll=12,
                           iid = "inst436", dept = "q"), 
             interval = "confidence") |>
  mutate(.lwr = .output - (.output - .lwr)/sqrt(2), .upr = .output + (.upr - .output)/sqrt(2))
```

```{r}
Compare <- Compare |>
  mutate(gpa4 = GPA4$.output) |>
  mutate(r_gpa_raw = rank(gpa_raw),
         r_gpa3 = rank(gpa3),
         r_gpa4 = rank(gpa4))

Compare |>
  point_plot(r_gpa_raw ~ r_gpa4)
```


## A political problem

The registrar would never perform such a regression. The political heat from the faculty would be too great. 

Can we construct a ranking that uses only `sid`, `session`, and `gradepoint`? That will let us avoid




How many students did each instructor teach?

```{r}
#| label: grades-42s
nstudents <- Events |> 
  summarize(count = n(), .by = iid) |>
  arrange(desc(count))
```

Let's look only at instructors with more than 10 students.

```{r}
#| label: grades-42t
Keepers <-
  nstudents |>
  filter(count > 10) |>
  left_join(Events)
```

## Method

<https://maherou.github.io/Teaching/files/CS317/masseyMethod.pdf>


## Matrix of students in departments

```{r}
To <- Keepers |> select(sid, dept, gradepoint)
M <- matrix(0, nrow=40, ncol=443)
depts <- unique(To$dept)
depts_inds <- 1:length(depts)
students <- unique(To$sid)
students_inds <- 1:length(students)

# Loop over the sessions
for (k in 1:length(depts)) {
  this_session <- To |> filter(dept == depts[k]) |> select(sid)
  inds <- which(students %in% this_session$sid)
  M[k, inds] <- 1
}
image(1:ncol(M), 1:nrow(M), 1000*t(M), col = terrain.colors(5), axes = FALSE)

S <- svd(M)
inds1 <- order(c(S$u[,1]))
inds2 <- order(c(S$v[,1]))
VA <- M[ inds1, inds2 ]
# assemble the first few rank-1 matrices
one <- S$u[inds1,1, drop = FALSE] %*% t(S$v[inds2,1, drop = FALSE])

partial <- 0 # initial value
for (k in 1:4) {
  partial <- partial +  S$d[k] * S$u[inds1,k, drop = FALSE] %*% t(S$v[inds2,k, drop = FALSE])
}




image(1:ncol(partial), 1:nrow(partial), t(partial), 
      col = scales::grey_pal(start = 0.2, end = 0.8)(15), 
      axes = FALSE)
```


## Matrix of students in sessions

```{r}
To <- Keepers |> select(sid, sessionID, gradepoint)
M <- matrix(0, nrow=1368, ncol=443)
sessions <- unique(To$sessionID)
sessions_inds <- 1:length(sessions)
students <- unique(To$sid)
students_inds <- 1:length(students)

# Loop over the sessions
for (k in 1:length(sessions)) {
  this_session <- To |> filter(sessionID == sessions[k]) |> select(sid)
  inds <- which(students %in% this_session$sid)
  M[k, inds] <- 1
}


image(1:ncol(M), 1:nrow(M), 1000*t(M), col = terrain.colors(5), axes = FALSE)

S <- svd(M)
inds1 <- order(c(S$u[,1]))
inds2 <- order(c(S$v[,1]))
VA <- M[ inds1, inds2 ]
# assemble the first few rank-1 matrices
one <- S$u[inds1,1, drop = FALSE] %*% t(S$v[inds2,1, drop = FALSE])

image(1:ncol(one), 1:nrow(one), 1000*t(one), col = terrain.colors(5), axes = FALSE)


dim((S$u[,1, drop = FALSE]))
dim(S$u[,1, drop=FALSE])
```

```{r}
foo <- data.frame(index=c(t(VA)), 
  y=rep(1:443,times=1368),
  x=rep(1:1368, each=443) )
ggplot( foo, aes(x=x, y=y, fill=index)) +
  geom_tile() +
  xlab("Class session") + ylab("Student") 
```


## Head-to-head competitions

```{r}
#| label: grades-42lu
To <- Keepers |> select(sid, sessionID, gradepoint)
From <- To |>
  rename(sid2 = sid,  gradepoint2 = gradepoint)
All <- To |> left_join(From) |> unique()
Session_pos <- All |>
  select(sessionID) |>
  unique() |>
  mutate(Session_pos = row_number())
Student_pos <- All |>
  select(sid) |>
  unique() |>
  mutate(Student_pos = row_number())

All<- All |>
  filter(sid < sid2) |>
  mutate(pointdiff = gradepoint - gradepoint2) |>
  left_join(Session_pos) |>
  left_join(Student_pos) |>
  left_join(Student_pos |> rename(sid2 = sid, Student2_pos = Student_pos))

M <- matrix(0, nrow = nrow(All), ncol = nrow(Student_pos))

Pos1 <- All |> select(Student_pos) |>
  mutate(pos = row_number() + n()*(Student_pos - 1))
Pos2 <- All |> select(Student2_pos) |>
  mutate(pos = row_number() + n()*(Student2_pos - 1))
M[Pos1$pos] <- 1
M[Pos2$pos] <- -1
rankings <- lm(All$pointdiff ~ M - 1)
Result <- tibble::tibble(ranking = coef(rankings), sid = Student_pos$sid) |> 
  arrange(desc(ranking))
```

Compare ranking to GPA
```{r}
#| label: grades-42lv
Sidebyside <- Events |> 
  summarize(gpa = mean(gradepoint, na.rm = TRUE), .by = sid) |>
  left_join(Result)

Sidebyside |> ggformula::gf_point(gpa ~ ranking)
```

Now we have the gradepoints in a head to head competition

```{r}
Pairs <- abs(M)
dim(Pairs)
S <- svd(Pairs)
inds1 <- order(c(S$u[,1]))
inds2 <- order(c(S$v[,1]))
VA <- Pairs[ inds1, inds2 ]
foo <- data.frame(index=c(t(Pairs)), 
  y=rep(1:443,times=13348),
  x=rep(1:13348, each=443) )
ggplot( foo, aes(x=x, y=y, fill=index)) +
  geom_tile() +
  xlab("Class session") + ylab("Student") 
```

## SVD approach, not working
Break into an array, students on vertical axis, instructors on horizontal.

MINI- PROJect on cleaning: Who are the duplicates?

```{r}
#| label: grades-42lw
Mat <-
  Keepers |> 
  unique() |> # THERE ARE DUPLICATES
  select(sessionID, sid, gradepoint) |>
  pivot_wider(names_from = sid, 
              values_from = gradepoint,
              values_fn = ~ mean(.x))
Mat[is.na(Mat)] <- 3.5
```

Make into a matrix
```{r}
#| label: grades-42lx
Students <- names(Mat)
Sessions <- Mat$sessionID
Mat2 <- Mat |> select(-sessionID) |>
  unlist() |> as.numeric() |> 
  matrix(nrow = length(Sessions))
```

Do the SVD

```{r}
#| label: grades-42ly
res <- svd( Mat2)
a1 <- res$u[,1,drop=FALSE]
b1 <- res$v[,1,drop=FALSE] |> t()
a2 <- res$u[,2,drop=FALSE]
b2 <- res$v[,2,drop=FALSE] |> t()
```

Show the raw data
```{r}
#| label: grades-42lz
library(reshape2) # for melt
melt( Mat2 ) |> 
  ggplot( aes(x=Var1, y=Var2, fill=value)) +
  geom_tile() +
  scale_fill_gradient2() +
  xlab("") + ylab("Student") 
```

Re-arrange according to principal vectors

```{r}
#| label: grades-52la
inds1 <- order(c(res$u[,1]))
inds2 <- order(c(res$v[,1]))
Sorted <- Mat2[ inds1, inds2 ]
Sorted[1:50,1:50] |> melt() |> 
  ggplot( aes(x=Var1, y=Var2, fill=value)) +
  geom_tile() +
  scale_fill_gradient2() +
  xlab("") + ylab("Student") 
```


## SAT scores and academic performance

The College Board claims that the predictive power of the SAT on (first-year) college performance corresponds to $r \approx 0.40$.

To visualize what this means, let's construct 10,000 pairs of SAT versus UATX performance that have this correlation and look at the rank of each student by both measures.

```{r}
n = 10000
Simulation <- tibble(
  common = 0.4 * rnorm(n),
  UATX = common + 0.47 * rnorm(n),
  SAT = common + 0.47 * rnorm(n)
)
Simulation |>
  model_train(UATX ~ SAT) |>
  R2()
Simulation |> point_plot(rank(UATX) ~ rank(SAT))
```

Perhaps a better intuition can be had by imagining 200 applicants and looking at the performace of those in the top half of the SAT versus those in the bottom half.

```{r}
Simulation |> 
  mutate(sat_position = ifelse(rank(SAT) > n/2, "top", "bottom")) |>
  take_sample(n = 200) |>
  point_plot(rank(UATX) ~ sat_position, annot = "model",
             point_ink = 0.5)
```

