---
title: MOSAIC Assignment Week 11
date: 2025-03-31
format: html
categories: [linear algebra]
---

```{r include=FALSE}
library(mosaicCalc)
library(LSTbook)
library(devoirs)
{{< include ../../_software/software.R >}}
```

{{< include ../../_software/devoirs.qmd >}}

```{webr-r}
#| autorun: true
#| context: setup
{{< include ../../_software/software.R >}}
```

## Part 1: By hand and eye

::: {#exr-girl-send-scarf}
{{< include ../../../../MC-Workbook/Block_3/girl-send-scarf.qmd >}}
:::

-----

::: {#exr-panda-think-plate}
{{< include ../../../../MC-Workbook/Block_3/panda-think-plate.qmd >}}
:::

-----

::: {#exr-duck-do-pantry}
{{< include ../../../../MC-Workbook/Block_3/duck-do-pantry.qmd >}}
:::

::: {#exr-titmouse-stand-pantry}
{{< include ../../../../MC-Workbook/Block_3/titmouse-stand-pantry.qmd >}}
:::

::: {#exr-cat-understand-car}
{{< include ../../../../MC-Workbook/Block_3/cat-understand-car.qmd >}}
:::

::: {#exr-kid-become-pants}
{{< include ../../../../MC-Workbook/Block_3/kid-become-pants.qmd >}}
:::


## Part2: Computing

### Basic operations

a. Use `vec()` to create a vector from individual components (*scalars*). Example:

```{webr-r}
#| persist: true
#| label: assignment-31-a
vec(3, 6, -9)
```

b. Use `rvec()` to create a random vector of the specified dimension.

```{webr-r}
#| persist: true
rvec(5)
```

c. Use the `%dot%` operator to calculate the dot product.

```{webr-r}
#| persist: true
#| label: assignment-31-b
u <- vec(1, 2, 3)
v <- vec(3, 2, 1)
u %dot% v
```

::: {#exr-31-dot-test-cases}
Write three test cases for `%dot%` using vectors for which you can easily find the value by eye.

```{webr-r}
#| persist: true
#| label: dot-test-cases
#| eval: false
vec(.....) %dot% vec(.....) # two dimensional vecs
vec(.....) %dot% vec(.....) # three dimensional vecs
vec(.....) %dot% vec(.....) # four dimensional vecs
```
:::

### Write these functions and tests

::: {#exr-31-make_veclen}
Use `%dot%`, `sqrt()`, and `/` to calculate the length of a vector
```{webr-r}
#| persist: true
#| label: write-length
#| eval: false
veclen <- function(v) {
  .....
}
```
:::

::: {.callout-tip collapse=true }
## Solution
```{r}
veclen <- function(v) sqrt(v %dot% v)
```
:::

::: {#exr-31-veclen-test}
Write three tests for `length()` on vectors where you *already know* the answer.

```{webr-r}
#| label: length-tests
#| eval: false
veclen( ..... ) == .....
veclen( ..... ) == .....
veclen( ..... ) == .....
```
:::

::: {#exr-31-unitvec-write}
Write a function, `unitvec()` that takes a vector as an input and returns the same vector but with unit magnitude. 

```{webr-r}
#| label: normalize-vec
unitvec <- function(vec) {
  
}
```

::: {.callout-tip collapse=true}
```{r }
unitvec <- function(vec) {
  vec/length(vec)
}
```
:::


```{webr-r}
#| label: unitvec-tests
# Add your tests here
```

Here's a test that I invented. See if it works in any dimension 2 or greater$
```{webr-r}
# Here's a test of mine
v <- rvec(3)
veclen(
  (length(v) *  unitvec(v)) - v
)
```

Explain the result of my test.

`r devoirs_text("my-unitvec-test")`
:::

::: {#exr-cosine-make}
Use `%dot%`, `sqrt()`, `*`, and `/` to calculated the cosine of the angle between two vectors.

```{webr-r}
#| persist: true
#| label: write-cang
#| eval: false
cang <- function(v, w) {
  .....
}
```

::: {.callout-tip collapse=true}
## Solution

```{r }
cang <- function(v, w) {
  (v %dot% w) / (veclen(v) * veclen(w))
}
```
:::
:::

::: {.exr-cang-test}
Write these tests for `cang()` for cases where you already know the answer:

```{webr-r}
#| label: cang-tests
#| eval: false
cang( ....., ..... ) == cos(0)
cang( ....., ..... ) == cos(pi/4)
cang( ....., ..... ) == cos(pi/2)
cang( ....., ..... ) == cos(pi)
```
:::

::: {#exr-correlation-is-angle}
Application. The correlation coefficient is a dot product. I'll write the function for you so that you can use the tilde notation from QR2.

```{webr-r}
#| label: find-r
cor_by_dot <- function(data, tilde) {
  left <- data[[tilde[[2]]]]
  right <- data[[tilde[[3]]]]
  left <- left - mean(left)
  right <- right - mean(right)

  cang(left, right)
}
```

Test this out on any data frame and pair of variables you like.

```{webr-r}
#| label: cor-by-dot-test
#| eval: false
Galton |> cor_by_dot(..tilde..)
Galton |> model_train(..tilde..) |> R2()
```

Explain whether the results correspond or not.
:::

### Orthogonality

::: {#exr-create-orthogonal1}
Create vectors that are orthogonal to each of these and confirm your answer using `cang()`

```{webr-r}
#| label: make-ortho-test
#| eval: false
u <- vec(1, 2, 3)
v <- vec(3, 1, 2, 4)
w <- vec(5, 6, -1, 2, 7)
orthu <- vec() # fill in your values!
orthv <- vec()
orthw <- vec()
cang(u, orthu )
cang(v, orthv)
cang(w, orthw)
```
:::


::: {#exr-ortho-to-any}
Here's a function (written in jibberish that you won't yet understand) but which will construct a vector orthogonal to any vector or set of vectors.

```{webr-r}
#| label: dtk-ortho
dtk_ortho <- function(M) {
  new <- rvec(nrow(M))
  qr.Q(
    qr(cbind(M, new))
  )[ , ncol(M) + 1]
}
```

Write some tests on vectors you create of various dimensions and find out whether `dtk_ortho()` works or not.

```{webr-r}
#| label: dtk-ortho-tests

# Your tests here
```

:::

Write the test code in the above chunk and explain what you found here.


`r devoirs_text("cor-by-dot-R2")`

