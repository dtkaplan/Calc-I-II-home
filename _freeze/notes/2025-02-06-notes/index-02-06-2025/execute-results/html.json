{
  "hash": "2a100b88e9d4e13b89d76bff8cf50fb3",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: DTK\ndate: 2025-02-06\nnumber-offset: 13\nformat: live-html\n---\n\n\n\n# 2025-02-06 class notes\n\nI haven't been going over the exercises. But I want to make clear that class is an appropriate place to talk about them:\n\ni. Things that made no sense.\nii. Things that you're shakey on.\niii. Need a review.\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Logarithms and digits\n\n### The \"digits()\" function\n\nI used the name *digits()* for my function. But maybe, since scientific notation is a familiar in-between form, I should rely on that notation. In\n$$6.32 \\times 10^{31}$$ \n\n31 is the *exponent*, 6.32 is the *mantissa* (and 10 is the *base*). Our goal with the `digits` function is to move the information from the mantissa into the exponent. That is, formally, we'll use 1 as the mantissa, and allow fractional exponents so to record what previously was spread between the original mantissa and the original exponent. For instance: you can confirm that \n\n$$6.32 \\times 10^{31} = 1 \\times 10^{31.80072}$$\n\nWritten this way, with the formal 1 mantissa, we read off the digits from the exponent. So, digits($3.2 \\times 10^{31}$) is 31.80072.\n\nNow, journey back historically to about 1580, before Napier's invention of the logarithm. We are going to scoop Napier, but with the advantage of modern computing. \n\nOur goal is to create a `digits()` function that for input 10 will give output 1, for input 100 will give output 2, and so on. Or, as a table:\n\n\ninput | output\n-----:|-------\n1 | 0\n10 | 1\n100 | 2\n1000 | 3\n\nWe need to figure out what the output should be for an input like 3 or 59. \n\nSince multiplying the input by 10 raises the output by 1, we can imagine that multiplying the input by $\\sqrt{10}$ will raise the output by 1/2. \n\nFrom ancient times, mathematicians knew how to compute the output of the `sqrt()` function. (We'll see how to do this by Newton's method in Block 3, but there is older methods, such as the [Babylonian](https://en.wikipedia.org/wiki/Methods_of_computing_square_roots). By iteratively computing square roots we can get decimal format versions of $\\sqrt[16]{10}$ or even $\\sqrt[256]{10}$. Also, from ancient times, mathematicians could multiply numbers. Thus, even if tedious, we can calculate the decimal version of, say $10^{17/128}$, which turns out to be 1.357727. That is, \n$10^{17/128}$ has 1.357727 digits!\n\nLet's make a lot of such numbers. The R code is not something you need to worry about.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPairs <- tibble::tibble(\n  basics = 2:31,\n  nice_powers = 10^(1/basics),\n  combiners = 1:30)\nMore_pairs <- with(Pairs, expand.grid(nice_powers, combiners)) |>\n  dplyr::rename(nice_powers = Var1, combiners = Var2) |>\n  dplyr::mutate(basics = rep(2:31, times =30))\nDigits_function <- More_pairs |>\n  dplyr::mutate(input = (nice_powers)^combiners,\n                output = combiners/basics)\nDigits_function |> \n  dplyr::filter(input < 10) |> \n  ggformula::gf_line(output ~ input)\n```\n\n::: {.cell-output-display}\n![](index-02-06-2025_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Logarithmic axes for graphing\nSome historical events as they are spaced over time. When there is no characteristic \"scale\" (e.g., a presidential term, a decade, a century), graphing the log is the way to go!\n\n::: {#fig-historical-events}\n![historical events spaced in time](www/historical-events.png)\n\nHistorical events spaced in time. Units are millions of years.\nSource: Katherine Yoshiwara [*Modeling, Functions, and Graphs*](https://yoshiwarabooks.org/mfg/Logarithm-Scales.html) \n:::\n\nTypically on a log scale such as @fig-historical-events, the tick marks are evenly spaced and it is only the *labels* that show that the logarithm is being plotted. Usually the labels are given in decimal notation, as in the top scale in @fig-labelled-1. But, as you know, the labels on the bottom scale are exactly equivalent, although written in scientific notation.\n\n::: {#fig-labelled-1}\n![](www/doubly-labelled-1.png)\n\nExponentially spaced numbers plotted along a ruler. The bottom labels show the numbers in scientific notation. If you want to see the logarithm instead, simply look at the exponent in the scientific notation label. Source: Katherine Yoshiwara [*Modeling, Functions, and Graphs*](https://yoshiwarabooks.org/mfg/Logarithm-Scales.html) \n:::\n\nIf you use finer divisions between numbers than the factor-of-10 used in @fig-labelled-1, the decimal notation and scientific notation numbers don't match so prettily. \n\n::: {#fig-labelled-2}\n![](www/doubly-labelled-2.png)\n\nWe can use steps smaller than the base of the log. Here the step is 0.1 log unit as opposed to the 1.0 log unit in @fig-labelled-1, the decimal equivalent of the log value seems bizarrely uneven. Source: Katherine Yoshiwara [*Modeling, Functions, and Graphs*](https://yoshiwarabooks.org/mfg/Logarithm-Scales.html) \n:::\n\nMost people are more comfortable with labels where the information is not squirreled up in the exponent, but displayed as round numbers as in #fig-labelled-1. To accomplish this, whenever ticks are spaced by smaller than a log unit, they end up being *unevenly spaced*.\n\nSometimes, as in @fig-energy-mass, only the occasional grid line is labelled, but the intermediate, unlabelled grid lines are unevenly spaced even if the labels are spaced evenly.\n\n::: {#fig-energy-mass}\n\n![](www/energy-mass.png)\nPlot of metabolic energy rate (that is, power in kcal/day) versus body mass (in kg) for different species of mammals. The dog's mass is at the first grid line after the one labelled 100. That is, the mass given for the dog is about 20 kg.In contrast, the sheep is at about 60 kg. It takes some practice to remember that the first grid line after 10 is 20, not 11. Source: Grace Imson, [*How to read a logarithmic scale*](https://www.wikihow.com/Read-a-Logarithmic-Scale)\n:::\n\n\nTwo different types of logarithmically labelled graphs are in wide use, as in @fig-semi-log-log. Semi-log is appropriate when only one variable is \"scaleless.\" Log-log is when both variables are without a characteristic scale.\n\n::: {#fig-semi-log-log}\n![](www/semi-and-log-log-scales.png)\n\nTwo types of logarithmically spaced graph paper for plotting one variable against another.\n:::\n\n\nEXERCISES:\n\n1. Label the intermediate (unlabelled) ticks on a logarithmic axis.\n\n2. The @fig-semi-log-log graphs are gridded on a \"decade\" system, that is, 1, 2, 3, ..., 10, 20, 30, ... 100, 200, .... What happens if we want to use a \"century\" system, that is 1, ..., 100, ..., 10000. What would be the values on the unlabelled tick marks. \n\nSolution: \n\nHere are the positions of 1, 2, 3, ..., 10  on the unevenly spaced ticks between decades:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog10(seq(1, 10, by = 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.0000000 0.3010300 0.4771213 0.6020600 0.6989700 0.7781513 0.8450980\n [8] 0.9030900 0.9542425 1.0000000\n```\n\n\n:::\n:::\n\n\n\nIf we want to use the same marks but have them divide a century, the evenly spaced values will be \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1, 100, length=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   1  12  23  34  45  56  67  78  89 100\n```\n\n\n:::\n:::\n\n\n\nand their logarithm positions will be\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog10(seq(1, 100, length=10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.000000 1.079181 1.361728 1.531479 1.653213 1.748188 1.826075 1.892095\n [9] 1.949390 2.000000\n```\n\n\n:::\n:::\n\n\n\nWe put the ticks at these positions and could write the labels either in scientific form as $$10^0, 10^{1.079181}, 10^{1.361728}, ...$$ or in decimal form as :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10^(log10(seq(1, 100, length=10)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   1  12  23  34  45  56  67  78  89 100\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n## Operations on Functions\n\nAll three of these seek a specific value for the input. That is, these operations \n\n- take a **function** as primary input, and a **domain** as an argument.\n- produce a quantity as output\n\n1. Zero-finding\n    - Guess two initial domain values and evaluate function at them.\n    - Modify the state \n       - Straddle zero? We have a bracket. Bisection or linear interpolation (Newton's Method)\n       - Otherwise: Move in the downhill direction until we have a bracket, then continue.\n           - If move proves to be uphill, start with different initial values. \n    - Return the average (or zero of the linear interpolant) of the bracketed values.\n\n2. Optimization in one input\n    - Algorithm I: Gradient descent (for *minimization*)\n        i. Guess two initial values\n        ii. Pick a third in a downhill direction.\n        iii. If the attempt to move downward results in an upward movement, now you have a bracket.\n    - Algorithm II: Newton's method for minimization (or maximization)\n        i. Guess **three** initial domain values and evaluate function at them.\n        ii. Fit a quadratic to the three points and find its argmin (or argmax)\n        iii. Choose the closest two of the initial values to the value in (ii) and repeat.\n    - Stupid calculus algorithm: Differentiate objective function and find the zero crossing. \n        i. Bad because you need many function evaluations. In practice, you need a *formula* for the objective function to create the derivative without large number of function evaluations.\n        \n        \nFor functions of multiple inputs, \n\n- Zero finding follows a similar strategy.\n- Optimization requires new concepts from calculus that we will start to talk about after break.\n\n3. Iteration. Take a function and a **state**. Evaluate the function on the state to create a new state, and so on ....\n    i. State is one value: a dynamical system or Newton's method \n    ii. Sometimes a state is a bracket.\n\n### Examples\n\nIn each of the following code chunks, I am creating a randomly shaped function and operating on it. I might get zero or one or more rows.\n\n#### Zero-finding example: \n\n```{webr-r}\nf <- doodle_fun(~ z)\nZeros(f(x) ~ x, domain(x = -10:10))\n```\n\n#### Optimization example:\n\n```{webr-r}\nf <- doodle_fun(~ z)\nargM(f(x) ~ x, domain(x = -10:10))\n```\n\n## Magnitude\n\nScientific notation makes it easier to write very big or very small quantities.  \n\n- Mass of the electron: 9.1093837 × 10^-31^ kilograms\n- Avogadro's number: 6.023 x 10^23^ (molecules per mol)\n6.6743 × 10-11 m3 kg-1 s-2\n- Universal gravitational constant: 6.6743 × 10^-11^ m^3^ kg^-1^ s^-2^\n- [Ideal gas constant]() 8.31446261815324\tJ⋅K^−1^⋅mol^−1^\n\nSuch numerals come in two parts:\n\ni. The **mantissa**, e.g. 9.1093837 or 6.023\nii. The **exponent**, e.g. -31 or 23\n\n\nSometimes we need to work in settings that include a huge range of relative sizes. Here's a table of internal combustion engines of various sizes.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDT::datatable(Engines)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-df322969b95fd5bb3291\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-df322969b95fd5bb3291\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\"],[\"Webra Speedy\",\"Motori Cipolla\",\"Webra Speed 20\",\"Webra 40\",\"Webra 61 Blackhead\",\"Webra 6WR\",\"Enya 60-4C\",\"Webra 91RC\",\"Technopower radial\",\"Webra T4\",\"Kavan FK50\",\"McCulloch M2-10\",\"Honda 450\",\"KFM 104\",\"Lycoming 0-145A\",\"Continental A65\",\"Franklin 4AC-176\",\"Franklin 6AC-296\",\"Continental C115\",\"Continental C140\",\"Lycoming GO-290A\",\"Ranger 6-440C\",\"Lycoming GO-435B\",\"Jacobs R-775\",\"Chrysler 340\",\"Ranger SGV-770C\",\"Allison V-1710\",\"Wright GR-2600\",\"Allison V-3420\",\"Daimler-Benz 609\",\"GMC Electromatic 645\",\"Daimler-Benz 613\",\"Sultzer 16-LVA\",\"Nordberg\",\"Ingersoll-Rand PKVT\",\"Fairbanks-Morse\",\"Cooper-Bessemer V-250\",\"Sultzer RD-90\",\"Burmeister and Wain\"],[0.135,0.15,0.25,0.27,0.43,0.49,0.61,0.67,0.913,0.93,2.45,3.5,34,68,75,79,82,118,119,135,150,171,182,229,245,331,735,885,1180,1400,1775,1960,2000,5260,10850,12860,13500,97200,102300],[1,1,1,1,1,1,1,1,7,1,2,1,2,4,4,4,4,6,6,6,4,6,6,7,8,12,12,14,24,16,16,24,16,16,16,12,16,12,12],[2,2,2,2,2,2,4,2,4,4,4,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[1.8,2.5,3.4,6.5,10,10,10,14.3,20,14.7,50,55,450,916,2370,2800,2800,4700,3000,3000,4750,7200,7100,12400,5569,12600,28000,42700,56000,61800,183000,89000,220000,488000,1165000,1327000,1334000,11850000,11900000],[13.5,15,16.5,21,24,24,24,27,15.9,27,34,44,70,90,92,98,100,106,102,102,124,105,124,133,101,102,194,155,140,165,239,162,250,356,406,508,457,900,840],[12.5,14,16,19,22,22,22,25,14,25,28,35,58,72,89,92,87,87,92,92,98,129,98,127,84,120,152,160,152,180,254,180,280,407,559,546,508,1550,1800],[0.45,1,0.78,0.96,1.55,2.76,0.84,2.85,0.82,1.43,4.1,6.5,43,79,65,65,75,130,115,140,145,200,220,225,275,450,1000,1350,2100,2450,3300,3120,4000,3000,4400,12000,7250,27600,27800],[22000,26000,22000,15500,14000,19000,11800,13000,8700,9300,8000,11000,8500,3900,2550,2300,2500,2600,2350,3000,3000,2450,3000,2000,5000,3000,2600,2300,2600,2800,900,2700,1100,400,360,400,330,119,110]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Engine<\\/th>\\n      <th>mass<\\/th>\\n      <th>ncylinder<\\/th>\\n      <th>strokes<\\/th>\\n      <th>displacement<\\/th>\\n      <th>bore<\\/th>\\n      <th>stroke<\\/th>\\n      <th>BHP<\\/th>\\n      <th>RPM<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[2,3,4,5,6,7,8,9]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n### Counting digits\n\n```{webr-r}\ndigits <- makeFun(log(x) / log(10) ~ x)\ndigits(658)\n```\n\n### Computing via the axes\n\n#### Linear axes\n\nThis graph will not be informative about the engines.\n\n```{webr-r}\ngf_point(RPM ~ mass, data = Engines)\n```\n\n#### Semi-log axes\n\n```{webr-r}\ngf_point(RPM ~ mass, data = Engines) |>\n  gf_refine(scale_x_log10())\n```\n\n#### Log-log axes\n\n```{webr-r}\ngf_point(RPM ~ mass, data = Engines) |>\n  gf_refine(scale_x_log10(), scale_y_log10())\n```\n\n\nUsing a ruler and a printed logarithmic scale\n\n## Units and Dimensions\n\nThink about the kinds of physical things, e.g. velocity, force, frequency, energy, power.\n\nWe start out with an abstract sense of these, e.g. what's the difference between force and velocity, or between energy and power.\n\nWe have a notation that enables us to construct *any kind of thing* by putting together powers of a very few general, simple kinds of thing: length, mass, time, money, ....\n\n",
    "supporting": [
      "index-02-06-2025_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/datatables-binding-0.24/datatables.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/dt-core-1.11.3/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/dt-core-1.11.3/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/dt-core-1.11.3/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}