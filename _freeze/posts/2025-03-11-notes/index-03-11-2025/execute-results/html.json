{
  "hash": "331815d827239e382d86741183eda72d",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: DTK\ndate: 2025-03-11\nnumber-offset: 24\nformat: live-html\n---\n\n\n\n\n\n# 2025-03-11 class notes\n\nPartial derivative\n: A derivative with respect to one variable, holding all the other variables constant. \"Constant\" is not necessarily zero. For instance $$f(x, y)\\equiv x y^2\\ \\ \\ \\longrightarrow\\ \\ \\ \\ \\partial_x f(x, y) = y^2 \\ \\text{ and } \\partial_y f(x,y) = 2 y x .$$\n\nOr, computationally, \n\n```{webr-r}\nf <- makeFun(x*y^2 ~ x & y)\nD(f(x,y) ~ x)\nD(f(x,y) ~ y)\n```\n\n## Almar's question from Friday\n\n> What happens when $x$ and $y$ are related?\n\nA function $f(x,y)$ does not itself impose any relationship between $x$ and $y$. They are the inputs and can be selected however you like.\n\nHOWEVER, when a function is held at a particular value, an *implicit* relationship between $x$ and $y$ is created: for a given value of $x$ there are only certain corresponding valid values of $y$. \n\nTo illustrate:\n\n```{webr-r}\ncontour_plot(\n  f(x, y) ~ x & y,\n  domain(x = -2:2, y = -2:2),\n  contours_at = 1\n  )\n```\n\nAlthough convention calls for these to be interpreted as *contours*, it's perfectly reasonable to think of each branch as defining a function $g(x)$.\n\nFor instance, suppose we have a physical system that has inputs $x$ and $y$. We add on to this a **control system** that, for any valid input $x$ changes $y$ automatically to stay on the contour line.\n\nWe would like to have, for instance, a formula that relates any change $dx$ in $x$ to a required change $dy$ in $y$ to keep us on the control line.\n\nThe change $dx$ induces a change in the function value of $\\partial_x f(x,y) dx$. Any nonzero change in $x$ would take us off the control line unless we change $y$ to balance it out. The change in function value due to a change $dy$ is $\\partial_y f(x,y) dy$.\n\nWe want the total change, due to both $dx$ and $dy$ to be zero. Hence:\n\n$$\\partial_x f(x, y) dx = - \\partial_y f(x, y) dy$$ or, re-arranged,\n$$\\frac{dy}{dx} = -\\frac{\\partial_x f(x, y)}{\\partial_y f(x, y)} .$$ \nThis is sometimes called \"*implicit differentiation*,\" and is taught in conventional Calc I courses. I don't see why. If you know about partial derivatives, the result is simple. \n\n\nor, in terms of the control system, $$dy = - \\frac{\\partial_x f(x, y)}{\\partial_y f(x, y)} dx$$\n\n\nLet's plot out this relationship between $dx$ and $dy$ need to keep us on a contour. \n\n```{webr-r}\ndom <- domain(x = -2:2, y = -2:2)\ncontour_plot(\n  f(x, y) ~ x & y,\n  dom, n_contours = 20) |>\n  vectorfield_plot(\n    x ~ 2*x*y, \n    y ~ - y^2, domain = dom)\n```\n\n\n\n## Derivs of low-order-polynomials\n\nThe low-order polynomial in two variables:\n\n$$g(x, y) \\equiv a_0 + a_x x + a_y y + a_{xy} x y + a_{xx} x^2 + a_{yy} y^2$$\n\n- Pick out two students to do $\\partial_x g(x, y)$ and $\\partial_y g(x,y)$\n- Pick out two students to do $\\partial_{xx} g(x, y)$ and $\\partial_{yy} g(x, y)$.\n- Pick out two students to do $\\partial_{xy} g(x, y)$ and $\\partial_{yx} g(x, y)$.\n\n$$\\partial_x g(x, y) = a_x + a_{xy} y + 2 a_{xx} x$$\n$$\\partial_y g(x, y) = a_y + a_{xy} x + 2 a_{yy} y$$\n\nA second-order polynomial in two inputs:\n```{webr-r}\nf <- makeFun(a0 + ax*x + ay*y + \n               axy*x*y + \n               axx*x^2 + ayy*y^2 ~ x & y,\n             a0 = \"a0\", ax = \"ax\", ay = \"ay\",\n             axy = \"axy\", axx = \"axx\", ayy = \"ayy\")\nD(f(x, y) ~ x)\nD(f(x, y) ~ y)\nD(f(x, y) ~ z)\nD(f(x, y) ~ x & x)\nD(f(x, y) ~ y & y)\nD(f(x, y) ~ x & y)\nD(f(x, y) ~ y & x)\n```\n\n\n\n\n```{webr-r}\nrrnorm <- function(n=1) {round(rnorm(n), 2)}\n\nmake_random_poly <- function(seed=NA) {\n  if (!is.na(seed)) set.seed(seed)\n  makeFun(a0 + ax*x + ay*y + axy*x*y + axx*x^2 + ayy*y^2 ~ x & y,\n          a0 = rrnorm(), ax = rrnorm(), ay = rrnorm(), \n          axy = rrnorm(),\n          axx = rrnorm(), ayy = rrnorm() )\n}\ng <- make_random_poly()\ncontour_plot(g(x, y) ~ x & y, domain(x=-1:1, y=-1:1))\n```\n\n```{webr-r}\ng\nD(g(x, y) ~ x)\nD(g(x, y) ~ y)\n```\n\nSecond-order partial derivatives\n```{webr-r}\nD(g(x, y) ~ x & x)\nD(g(x, y) ~ y & y)\nD(g(x, y) ~ x & y)\nD(g(x, y) ~ y & x)\n```\n\n## Almar's question: \"What if $x$ and $y$ are related?\"\n\nThree ways to think about this in terms of functions:\n\n1. $y$ is a function of $x$, that is, $y(x) \\equiv ...$\n2. $x$ is a function of $y$, that is $x(y) \\equiv ...$\n3. $x$ and $y$ are both functions of some third variable $t$.\n\nHandling case 1:\n\n```{webr-r}\nf <- doodle_fun(~ x + y, seed = 9392)\n```\n\nExample of $y$ being a function of $x$:\n\n```{webr-r}\ng <- makeFun(f(x, sin(x)) ~ x + y)\n```\n\n```{webr-r}\ndom = domain(x = -5:5, y = -5:5)\ncontour_plot(\n  g(x, y) ~ x & y, \n  dom)\n```\n\n## Practice problems on the \"Rules\"\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}