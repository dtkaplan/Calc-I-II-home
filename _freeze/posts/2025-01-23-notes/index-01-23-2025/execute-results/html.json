{
  "hash": "76c526ed033e05826c036445d67059cb",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: DTK\ndate: 2025-01-23\nnumber-offset: 7\nformat: live-html\n---\n\n\n\n# 2025-01-23 class notes\n\n\n\n\n\n\n\n## Where we are ... and where we are heading\n\nYou are getting comfortable with the basics of function, spaces, quantity. You have a basic vocabulary for describing functions in words and for interpreting functions with one- and two-inputs. You have a basic set of **pattern-book** functions. These are purely mathematical functions in the sense that the input and output is always a pure number rather than a quantity with units and dimension.\n\nIn modeling, we construct functions to represent the relationship between quantities in the real world. \n\n- You have already seen how to **parameterize** the pattern-book functions so that they can take a **quantity** as input and produce a (perhaps different) **quantity** as output. This is the point of input and output scaling: (Chapter 8)\n\n- Input scaling turns a quantity into a pure number suited as an input to the pattern-book functions.\n\n- Output scaling turns a pure number---the output of a pattern-book function---into a quantity.\n\nACTIVITY: If $x$ and $f(x)$ are pure numbers, explain what have to be the dimensions in the scaling parameters \n\n- $a (q - q_0)$ is to translate $q$ to a specified quantity\n- $A f(a(q - q0) + b) + B$ to translate the pure number output of $f()$ into the output quantity $Q$.\n\ni. input: miles per hour; output: force (e.g. air resistence)\nii. input: Yen; output: tons of cardboard boxes\n\n\n\nTODAY, we will discuss two important topics:\n\n- The idea of \"fitting functions to data\" and the basics behind getting a computer to do this for you. (Chapter 7). \n\n- Combining existing functions to create new ones. (Chapter 9)\n\n\n\nTOMORROW, we will look at \"fitting function features\": Chapter 11. There are a few recognizable features---\"amplitude,\" \"baseline,\" \"doubling time,\" etc.---that enable us to estimate the parameters of a handful of functions based on measurements of plotted data or a specified graph. \n\nNEXT WEEK: \n\ni. Looking at functions with multiple inputs. (Chap 10)\nii. Using low-order polynomials to encode our understanding of a relationship. (Chap 12)\niii. Some of the mathematical operations we can perform on functions to extract information from them. (Chap 13)\n\n\n\n## Framework Part 2: Automatic fitting of functions to data\n\n\n### Procedure: Guess, check, and improve\n\nGuess: Pick/guess some more-or-less reasonable specific parameter values\n\nCheck: Now that we have a function in hand (with the guessed parameter values), how close \nis our function to the data. We will measure this with the \"residuals.\" Each data point is a distance from the function. We'll sum or average this over all the data points to get a reading of closeness.\n\nImprove: The goal is to modify our guess in order to improve the closeness of our function to the data. How can we guess how to change our first guess to improve things? This is where you can start to talk about finite diferences, slopes, and increments. We will eventually change this into the language of \"derivatives.\" The \"back propagation\" used in Deep Learning neural networks is nothing more than this, although on an immense scale.\n\n`fitModel()` adopts this strategy. Sometimes it needs a starting guess, sometimes not. Later in the course we'll see a way (that sometimes works) to avoid the starting guess.\n\n### Fitting functions to data\n\nAn informal way to fit functions works when we \"check\" by eye the current fit by looking at the match between the graph of the function and the data. Then tweak the input and/or output scaling to improve things a little bit. \n\n\n\n## Assembling new functions from existing ones\n\nWidely used ways to combine functions to create new ones:\n\n1. Linear combination\n2. Function multiplication\n3. Function composition\n4. Piecewise definition (and the `ifelse()` function.)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}