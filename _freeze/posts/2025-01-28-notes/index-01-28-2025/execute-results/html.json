{
  "hash": "175ed11a67b38e03c46156f39d9e6e69",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: DTK\ndate: 2025-01-28\nnumber-offset: 9\nformat: live-html\n---\n\n\n\n# 2025-01-28 class notes\n\n\n\n\n\n\n\n[picked up from Friday's class]\n\n\n## Chapter 11: Fitting features\n\nInput- and output-scaling heuristics for a handful of pattern book functions \n\nNote that the output scaling is a form of LINEAR COMBINATION.\n\n### Exponential \n\n[We did this one on Friday 24 Jan.] But here's a game for estimating parameters. Warning: You won't always be able to see the features clearly enough to make good estimates.\n\n```{webr-r}\nt0 <- sample(1:20, 1)\nhalflife <- exp(runif(1, -15, 15))\nspan <- sort(runif(2, t0 - 5*halflife, t0 + 5*halflife ))\nf <- makeFun(A*exp((t-t0)/halflife) + B ~ t, \n             A = sample(setdiff(-10:10, 0), 0), \n             B = sample(-10:10, 1))\nslice_plot(f(t) ~ t, \n           domain(t = c(span)),\n           npts = 500\n           )\n```   \n\n### Sin(). \n\nThere are four parameters.\n\nThe output and output scaling is the same as for other functions, but a different convention is used for the input scaling expression: $$A \\sin\\left(\\ \\underbrace{\\frac{2\\pi}{P} (t-t_0)}_\\text{input scaling} \\right) + B .$$\n     \n- $P$ is the **period**: peak-to-peak in the domain.\n- $B$ is still called the \"baseline\" but it is not at the bottom of the function range. \n- $A$ is the \"amplitude\". It corresponds to **half** the peak-to-trough range.\n- $t_0$ is the \"left-shift,\" the location in the domain of an upward-sloping baseline crossing. \n- Sometimes people write things differently: \n       \n    i. $A \\sin(2\\pi (t-t_0)/P) + B$\n    ii. $A \\sin(2\\pi t/P + \\theta) + B$\n    iii. $A \\sin(\\omega t + \\phi) + B$\n    iv. $A \\sin(\\omega t) + B \\cos(\\omega t) + C$\n           \n- The first three of the above should be recognizably equivalent with simple algebraic re-arrangement. (iv) is more subtle and results from a trigonometric *identity*. \n- We'll use (i), and you're expected to be able to estimate by eye the four parameters.\n- We could also write $A \\cos(2 \\pi (t - t_0)/P) + B$, but $t_0$ would be the location of a peak.\n       \n    \n```{webr-r}\nperiod <- sample(1:20, 1)\nspan <- sort(runif(2, -3*period, 3*period ))\nslice_plot(A*sin(2*pi*(t-t0)/P) + B ~ t, \n           domain(t = c(span)),\n           A = sample(setdiff(-10:10, 0), 1), \n           B = sample(-10:10, 1),\n           P = period, \n           t0 = sample(seq(-pi, pi, length=10), 1),\n           npts = 500\n           )\n```           \n\n\n\n### Gaussian & sigmoid\n\n**Output scaling** is the same as always: $A$ and $B$.\n\n- for $A > 0$, $B$, \"baseline,\" is the value at the left horizontal asymptote.\n- $A$ is more difficult for `dnorm()`\n    - `pnorm()`: easy. Vertical distance between lower and upper horizontal asymptote. \n    - `dnorm()` the meaning of $A$ depends on `sd`. If you must know (you don't at this point), measure the peak to baseline distance, then divide by `dnorm(mean, mean, sd)` Of course, you need to know mean and sd for this.\n            \n**Input scaling** is written differently in terms of two *new* parameters: `mean` and `sd`.\n\n- `mean` the location in the domain of the peak (`dnorm()`) or the half-way point (`pnorm()`)\n    - `sd`, the \"standard deviation,\" is \n        - `dnorm()`: *roughly* the half-width (61%) at half-height \n        - `pnorm()`: *roughly* the width between the half-way point and the input producing an output at three-quarters (80%) of the way to the top.\n    \n\n```{webr-r}\nmean <- sample(1:20, 1)\nsd <- runif(1, 0.5, 5)\nfun <- ifelse(rnorm(1) > .25, pnorm, dnorm)\nspan <- runif(1, -mean - 3*sd, mean - sd)\nspan[2] <- runif(1, mean + sd, mean + 3*sd )\nf <- makeFun(A*fun(t, mean=mean, sd==sd) + B ~ t, \n             A = sample(setdiff(-10:10, 0),1), \n             B = sample(-10:10, 1))\nslice_plot(f(t) ~ t, \n           domain(t = c(span)),\n           npts = 500\n           )\n```           \n\n\n## Chapter 10: Functions with multiple inputs\n\nMaking them by ...\n\n- Linear combination\n- Multiplication\n- Composition (?)\n- Piecewise (?)\n\nCommon forms from science generally:\n\n- Example: Breaking distance of car as function of speed and road conditions (slip)\n\n- Interaction. \n\n    - Example, rabbits and foxes. Change in rabbit population as function of rabbit population and fox population.\n    - Example, rate of reaction between two re-agents $\\alpha\\ [A][B]$\n    - Example (maybe): demand for one good as a function of price of that good and price of a substitute.\n    - We are going to see this particularly when we look at low-order polynomials in multiple variables.\n    \n    \n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}